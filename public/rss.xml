<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>KEJK | Writing</title>
        <link>https://kejk.tech</link>
        <description>Thoughts on design, development and career progression</description>
        <lastBuildDate>Fri, 24 Mar 2023 09:10:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Feed for Node.js</generator>
        <language>en</language>
        <image>
            <title>KEJK | Writing</title>
            <url>https://kejk.tech/logo.svg</url>
            <link>https://kejk.tech</link>
        </image>
        <copyright>All rights reserved 2023, Karl Emil James Koch</copyright>
        <item>
            <title><![CDATA[AI as pair design]]></title>
            <link>https://kejk.tech/thoughts/ai-as-pair-design</link>
            <guid>641b3f99d0ab1034f24698ab</guid>
            <pubDate>Wed, 15 Mar 2023 06:54:40 GMT</pubDate>
            <description><![CDATA[The ultimate design companion is just around the corner]]></description>
            <content:encoded><![CDATA[These days, there’s always a constant influx of new things to learn as a designer. We had the great “should designers code” debate; we also had accessible 3D crop up with new Figma-like tools such as [Spline](https://spline.design/) to learn; we had NFTs where you needed to grasp the concept of tokens and fungibility; and finally we have AI, where you need to learn how to integrate it into your workflow to avoid “[losing your job](https://www.theguardian.com/commentisfree/2023/jan/24/chatgpt-artificial-intelligence-jobs-economy)”.

Granted, no, you don’t have to actually learn all these tools or ways of working. But as Designers and Developers, we’re often curious by nature and keen to be on the bleeding edge of technologies. Naturally that means we want to try things out, but importantly we also sometimes have to because our company (or companies we want to work for) expect us to.

Recently there’s been a lot of discussion about how AI could finally be after our [design](https://medium.com/microsoft-design/yes-ai-will-replace-designers-9d90c6e34502) or [development](https://medium.com/geekculture/will-ai-replace-programmers-fb6fcfd70b37) jobs. Like always with AI, it’s seen as an inevitability and that maybe we need to start looking for new things to be good at. [Kyle Lambert](https://indieweb.social/@kylelambert) wrote a [great piece](https://www.imkylelambert.com/articles/will-ai-take-my-design-job) on this recently. 

In reality, yes, AI may soon get good enough to do some of the tasks of a designer. But critically, it’s still very much at the early stage where it simply copies things from the internet and attempts to sometimes create something slightly new, but that normally always has flaws.

The more I’ve been playing with Chat-GPT which is [OpenAI](https://openai.com/)’s playground for its [GPT-3](https://openai.com/blog/gpt-3-apps/) AI model, the more I’ve gotten interested in treating it more like a companion than a threat. More like a pair designer or pair developer, helping me get around thorny problems or simply just kick of a project.

> Instead of assuming AI will take our jobs, we can assume it’ll become the best pair designer/developer to help us get started.

I recently spent some time using it as a copywriting assistant when designing mocks.

I can ask it a quick phrase like “Write a headline that helps explain the importance of investing compared with saving into an interest-bearing account over the long term” which gives me the response “Investing for the Future: A Look at How Smart Investing Beats Out Saving for Retirement”. Not bad really!

![Image of the first copy request and answer inside the PomptAI interface](https://imgix.cosmicjs.com/77d1b720-9ee7-11ed-aca2-37db769eb59f-AEB814E6-2BB5-4EAE-908F-2DFAA9920AF5.jpeg)

What about “Write three bullet points for an app that helps explain the importance of investing compared with saving into an interest-bearing account over the long term” instead? This gives me:

*   Investing in the stock market, mutual funds or other types of investments can result in higher returns than the interest rate on a traditional savings account.
    
*   Investing allows your money to grow faster over the long term, allowing you to take advantage of compound interest.
    
*   Investing allows you to diversify your portfolio and protect against market fluctuations, providing valuable protection for your savings.
    

![Image of the second copy request and answer inside the PomptAI interface](https://imgix.cosmicjs.com/77dcb3a0-9ee7-11ed-aca2-37db769eb59f-BEC501B5-CCA8-4722-B465-5E874953C3A7.jpeg)

Also really not bad at all. And if anything, a helpful jumping off point to refine based on our copywriting style.

AI pair design will also provide a great mechanism for fast iterations on an idea. Think of it as the ultimate Crazy 8’s companion. Feed it the initial concept and let it go wild for you. These tools will also be able to quickly evaluate hundreds of design solutions and narrow them down as quickly as possible. This means that the design process can be completed much faster than if it were done by humans. Equally, they can also be programmed to automatically adjust parameters and learn from their mistakes, allowing them to continuously improve the design and produce more reliable results with added accuracy.

But this is more a future thinking concept when tools powered by [DALL-E](https://openai.com/dall-e-2/), [Midjourney](https://www.midjourney.com/home/?callbackUrl=%2Fapp%2F) or other new AI models improve. Right now, the image generation is incredible but it doesn’t really hit the mark for consistently good app ideas, it’s much more useful for fantasy images.

[Diagram](https://diagram.com/) have started to play with some interesting ideas here via their [Magician](https://magician.design/) plugin for Figma. As a way to generate quick icon iterations, UI and marketing copy or image ideas, it’s a fantastic tool to speed up your workflow. But it can’t replace an amazing icon designer, illustrator or copywriter right now.

Ultimately we’ll still need the human in the loop to ensure designs connect well with the people who’ll interact with them. It’s naive to think AI will be capable of human-level empathy any time soon or to make real, “conscious” decisions off the back of internal feedback. But one day we’ll likely get there.

I think we’ll see an entire industry boom around the design of great prompts soon too. Imagine feeding an AI with the perfect prompt to generate amazing outputs. We’re seeing this happen in the form of shared prompt spreadsheets or other [websites](https://prompts.chat/), but there’ll likely be entire businesses that help you generate great prompts that generate great outputs. Then, eventually, we won’t need those anymore and we’ll just skip straight to great outputs from any prompt.

I think it’ll be important for us to embrace this new reality. Eventually every product will be powered in some way by AI, some are even already betting on it as [part of their product strategy](https://www.notion.so/product/ai). So if you’ve not tried out GPT-3 and want to give it a go on iOS or macOS then you can [try out an app](https://testflight.apple.com/join/mXfEcgfv) I built for myself via TestFlight. It’s a simple native companion that uses OpenAIs API to provide responses based on text input. You can read more about [here](https://kejk.tech/prompt-ai).

I encourage you as a designer to embrace it to shortcut the more tricky part of mocking designs—coming up with fake but realistic copy—and let me know if PromptAI proves useful. As a developer, I’d encourage you to play with [GitHub Copilot](https://github.com/features/copilot) again if you’ve not in a while, it’s incredible and powered by Codex from OpenAI (which you can also use in PromptAI’s Code tab).

> Update: a great article from Geoffrey Litt about thinking of ChatGPT as the [ultimate muse](https://www.geoffreylitt.com/2023/02/26/llm-as-muse-not-oracle.html).

> Update: another great take from [Matthew Ström](https://matthewstrom.com/writing/design-by-wire/) comparing AI in design to the notion of flying-by-wire. ]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/db630760-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Two weeks and five lessons]]></title>
            <link>https://kejk.tech/thoughts/two-weeks-and-five-lessons</link>
            <guid>641b3f99d0ab1034f24698ad</guid>
            <pubDate>Sat, 04 Mar 2023 10:48:01 GMT</pubDate>
            <description><![CDATA[Lots of conversations, tasks, research and reading later]]></description>
            <content:encoded><![CDATA[When on the outside looking in during an interview process, you can learn a lot about a company. By reading the docs they send you, looking for Glassdoor reviews or by asking questions at interview stage. But until you’re actually there, you don’t know if you made the right choice. 

DuckDuckGo runs very differently to places I’ve worked before, but the way it runs is incredibly exciting and offers a whole host of opportunities to do your best work. 

Below are the top five things I’ve noticed so far. 

## 1. Levels don’t matter, so don’t bring them up

We have a rule internally that we don’t share our level anywhere except in an external public forum (for example, LinkedIn) and that’s only if we want to. 

By removing our levels from the conversation, the best ideas and best opportunities rise to the top no matter where they came from.

This means that meetings involving C-suite, VP’s and others don’t lead to top down solutions. They create open spaces for discussion. Yes it’s possible to find out people’s level (obviously you’ll know the C-suite) but this approach is disarming and provides space for everyone to have maximum impact.

We still have assigned people who lead specific objectives, but they’re just the directly responsible individual, not necessarily the final decision maker. This approach opens the floor for anyone at any level to have equal or outsized impact, but with ownership falling on the lead for that objective as a point of last resort.

## 2. Salaries are level dependent, not role dependent

It doesn’t matter what you do, whether it’s design, development, data science, social media etc. What you earn is relative to your level. So there’s no fighting over why one team are paid more than another. We all earn the same, because our value to the business is the same. Again, this has a disarming effect, allowing us to focus on doing our best work and not on whether we’re earning the same as the other people in the virtual room we’re in.

This also means it’s really easy to see a path forwards from where you are and to understand what the potential is for levels and roles as they’re globally the same.

Inline with point 1, the fact that all roles earn equal salaries helps with preventing an attitude of passing blame or feeling something is “above your pay-grade” because someone else in the room is "probably" earning more than you.

## 3. We write everything, and I mean everything, down

Writing everything down makes it possible for anyone to go back and see why a decision was made, even if that decision was made in 2015… it’s immense and quite overwhelming to begin with, but makes all the difference as a newbie to the company.

This also means that onboarding is fully self-directed (much like a lot of the work we do here), so it’s possible to onboard in your own time and it doesn’t take people out of their responsibilities to be constantly trying to help you along (although they will if you ask!).

We also ensure that project conversations are captured for all to see and discover. We use Mattermost (an open source Slack alternative) for synchronous text conversations, but Mattermost automatically clears after a week so that we're encouraged to leverage Asana for project conversations.

## 4. Fully remote work creates better work/life boundaries

In our modern world, we have lots to do and the typical 9-5 office model restricts this. Fully remote, and predominantly asynchronous work, enables better work/life balance by allowing you to get your work done when it suits you. 

Those times can shift day to day. If you’ve got an appointment, no need to take half a day off, just go to it and make up the time later or when it suits you. As long as you deliver, it doesn’t matter when you did it or how long it actually took to complete. No-one is watching to see how long you've been online or when you last sent a message.

Obviously the flip side of this is that it can be possible to work different hours to your significant other in order to meet with overseas colleagues and this may create complexity with home routines. It’s important to be able to say no to meetings (and we encourage this!) if they’ll interfere with your personal life regularly.

Most importantly, on Wednesdays and Thursdays we have a rule that no recurring meetings take place. This gives space for deep work and is followed to the letter company-wide without question. Sporadic meetings can take place on these days, but they're not commonplace.

## 5. Anyone can take on any project at any time

You can propose a new project idea or pick up anything in the pool of ideas at any time. There’s no restrictions around a person being tied to one siloed product area. If I want to work on the Mac browser for a project cycle and then shift to the Extension, Search, Mobile apps etc., then I can. 

This flexibility creates an almost agency-like model but tied to a single vision. This also prevents possible boredom or burnout from working on a single part of a product relentlessly.

## Trust matters

Overall, the most important lesson in all of this comes down to trust. In every role I've looked for, and every interview conversation I've had, I've always prioritised asking about trust within the organisation. It's vital to me that I'm given the space and trust to do my best work. I don't want to be micromanaged, especially not at this stage in my career. 

Based on the above observations and many conversations, it's ultimately the most critical part of what makes the company work. Without implicit trust in everything and everyone, the company would simply cease to function at the speed, with the level of quality of polish, that it currently does. 

Our growth has been very intentional, relative to other tech companies out there, our team is still small and nimble. But this means trust is essential and the rewards are there for all to see and benefit from. 

---------

If you’re looking for your next opportunity, check out some of our current [open opportunities](https://duckduckgo.com/hiring). ]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/057abe20-ba7a-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Digital Playgrounds]]></title>
            <link>https://kejk.tech/thoughts/on-digital-playgrounds</link>
            <guid>641b3f99d0ab1034f24698ae</guid>
            <pubDate>Sat, 04 Mar 2023 10:47:47 GMT</pubDate>
            <description><![CDATA[Why creating stuff for yourself is the best way to learn a new technology or how something works]]></description>
            <content:encoded><![CDATA[## Building for fun, by solving problems you face

I've always been a bit of a nightmare when it comes to trying to solve problems for myself. I can't help myself, I just end up spending time tinkering to try and speed up my workflow and improve the outcomes of what I'm doing for future me.

Where it becomes a nightmare is when I spend more time on trying to solve the problem than I do actually taking advantage of the solution…

I've always felt that creating stuff for yourself is the best way to learn a new technology or how something works. Tutorials in a lot of ways are great, but you'll retain the info much better _and_ keep coming back to learn more about it, if what you build benefits you personally and solves a real problem you regularly face.

Let's face it, whilst you can learn things from building yet another to-do list app, is that something you really need (he writes, via his home-grown markdown editor he didn’t need to make). 

I started tinkering with my personal website (from `HTML` and `CSS` to `Vue` and then `React`), then got into hacking around Figma plugins to make designing easier, which then got me into writing SwiftUI apps to improve the rest of my workflows. But I also ultimately want to better understand any technology I’m interested in designing for. I’ve never felt I can design to the best of my ability unless I’m able to understand how the sausage is made. 

But more than that, tinkering and building things for myself makes my life easier and keeps me deeply interested in the evolution of design and technology. It keeps me at the forefront of aspects of it and helps to ensure I don’t design for ideas that were 5-years-ago-good.

The biggest thing I’ve found is to be logical, take your time and step up slowly from simple to complex. My first app was just a basic pixel to rem calculator, then it could pass data between views via AppStorage, then I expanded to add other calculators, then adding widgets, and now it stores saved calculations in Core Data so it has persistence between restarts etc.

Recently I’ve been working on a series of micro apps that interface with the Cosmic API (my headless CMS of choice and also a team I work with). These little utilities allow me to extend the power of my CMS into native apps for my phone, iPad and Mac. They fundamentally make my life easier, but, they’re not essential. They’re also not release-worthy. And that’s okay, because they help me solve specific problems I have and allow me to more deeply understand the technology that interacts with the API, and also even better understand the API itself. This means, as the Design Lead, I can better understand what our end customers might also be trying to do with our API and therefore make suggestions and improvements to the API based on roadblocks I faced.

One example of this, was adding in the ability to edit content that was in a ‘draft’ state via the API itself rather than just within the web app. This was because I had blogs in draft on my Cosmic Go app that I wanted to tweak before I published. Helpful for me, but also, I couldn’t have been the only person needing this. I also had the backchannel to fix it and the visibility of the issue thanks to my tinkering. 

In terms of those micro-apps; I’ve spent some time building an app that [decodes JSON](https://www.kejk.tech/cosmic-go) from my Cosmic CMS to show me my bookmarks, blogs, features and some key stats—as well as letting me edit them too! I’ve built a simple media uploader that returns a Cosmic link to your clipboard, an app to write this very blog post in a super simple markdown editor that saves to iCloud using native plaintext files, and even an app [powered by](https://www.kejk.tech/prompt-ai) GPT-3 to interface with ChatGPT, Codex and DALL-E.

![Cosmic Writer on macOS](https://imgix.cosmicjs.com/7c3afb50-a3e2-11ed-8d58-2bb0c90a324a-Cosmic-Writer.jpg)

If you use iOS or macOS and are interested in learning, I’d recommend you try SwiftUI, with live previews and a very declarative approach, it often feels like designing in code. It’s also super quick to pick up and build easy things. Check out Paul Hudson’s [tutorial](https://youtube.com/playlist?list=PLuoeXyslFTuaZtX7xSYbWz3TR0Vpz39gK) series’, they’re amazing and save me ages of hunting around. Also check out this post by Stammy on [getting started with SwiftUI](https://paulstamatiou.com/getting-started-with-swiftui/) as a Designer. Stammy also [wrote about building for yourself](https://paulstamatiou.com/building/) a couple of years back. 

If you want to check out some great examples of people with digital playgrounds, check out [Rauno Freiburg](https://rauno.me/craft) for example, to see some neat stuff. Or [Julius Koroll](https://www.itsjuko.com/playground) for more design-specific playing around. And finally, [Adrian Mato](https://mastodon.design/@adrianmg/109794115937273202) has been playing around with building a game recently!]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/fd52e1f0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Shift gears and switch careers]]></title>
            <link>https://kejk.tech/thoughts/shift-gears-switch-careers</link>
            <guid>641b3f99d0ab1034f24698af</guid>
            <pubDate>Sat, 04 Mar 2023 10:47:31 GMT</pubDate>
            <description><![CDATA[I've talked about my history before, but I haven't provided explicit advice about how to switch careers]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/f4021620-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Strip your URLs to super simple domains]]></title>
            <link>https://kejk.tech/thoughts/strip-your-urls-to-super-simple-domains</link>
            <guid>641b3f9ad0ab1034f24698b0</guid>
            <pubDate>Sat, 04 Mar 2023 10:47:15 GMT</pubDate>
            <description><![CDATA[RegEx has been around since the 50's, and it's still just as unreadable]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/e97a7800-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How to make friends and influence designers]]></title>
            <link>https://kejk.tech/thoughts/how-to-make-friends-and-influence-designers</link>
            <guid>641b3f9ad0ab1034f24698b1</guid>
            <pubDate>Sat, 04 Mar 2023 10:46:59 GMT</pubDate>
            <description><![CDATA[Why every design crit should be well structured, predictable and facilitated]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/dfc8ee90-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Design for handshakes not handovers]]></title>
            <link>https://kejk.tech/thoughts/design-for-handshakes-not-handovers</link>
            <guid>641b3f9ad0ab1034f24698b2</guid>
            <pubDate>Sat, 04 Mar 2023 10:46:42 GMT</pubDate>
            <description><![CDATA[Why it's better to shake hands with your developers, than throw your designs over the fence]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/d6020860-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On creativity as a process for catharsis]]></title>
            <link>https://kejk.tech/thoughts/on-creativity-as-a-process-for-catharsis</link>
            <guid>641b3f9ad0ab1034f24698b3</guid>
            <pubDate>Sat, 04 Mar 2023 10:46:27 GMT</pubDate>
            <description><![CDATA[The more I listen to our third album, the more I recognise the fact that I wrote it as a form of catharsis.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/cd89e950-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Rumination, iteration or procrastination]]></title>
            <link>https://kejk.tech/thoughts/rumination-iteration-or-procrastination</link>
            <guid>641b3f9ad0ab1034f24698b4</guid>
            <pubDate>Sat, 04 Mar 2023 10:46:12 GMT</pubDate>
            <description><![CDATA[Knowing when to let an idea go and when to not even go there.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/c4145770-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Polywork: LinkedIn without the Suits]]></title>
            <link>https://kejk.tech/thoughts/polywork-linkedin-without-the-suits</link>
            <guid>641b3f9bd0ab1034f24698b5</guid>
            <pubDate>Sat, 04 Mar 2023 10:45:57 GMT</pubDate>
            <description><![CDATA[The future of networking is being built in the open.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/bb110f60-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Tempo: Designing a product that demands to not be used]]></title>
            <link>https://kejk.tech/thoughts/tempo-designing-a-product-that-demands-to-not-be-used</link>
            <guid>641b3f9bd0ab1034f24698b6</guid>
            <pubDate>Sat, 04 Mar 2023 10:45:37 GMT</pubDate>
            <description><![CDATA[Tempo is a minimalist email client, making email simple again]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/aea8ca60-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Why every designer should experience customer service]]></title>
            <link>https://kejk.tech/thoughts/why-every-designer-should-experience-customer-service</link>
            <guid>641b3f9bd0ab1034f24698b7</guid>
            <pubDate>Sat, 04 Mar 2023 10:45:16 GMT</pubDate>
            <description><![CDATA[It's common when joining a new company to get thrown straight in at the deep end. Sometimes, it’s better not to. ]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/a2c23880-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[What I've learnt over the past year]]></title>
            <link>https://kejk.tech/thoughts/what-ive-learnt-over-the-past-year</link>
            <guid>641b3f9bd0ab1034f24698b8</guid>
            <pubDate>Sat, 04 Mar 2023 10:44:31 GMT</pubDate>
            <description><![CDATA[Lessons I’ve learnt over the past year.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/87eba550-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Why you should reply to automated emails]]></title>
            <link>https://kejk.tech/thoughts/why-you-should-reply-to-automated-emails</link>
            <guid>641b3f9bd0ab1034f24698b9</guid>
            <pubDate>Sat, 04 Mar 2023 10:44:11 GMT</pubDate>
            <description><![CDATA[Reply to those automated emails, you never know what might happen.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/7c3c2900-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Getting DRY with Figma plugins]]></title>
            <link>https://kejk.tech/thoughts/getting-dry-with-figma-plugins</link>
            <guid>641b3f9cd0ab1034f24698ba</guid>
            <pubDate>Sat, 04 Mar 2023 10:43:56 GMT</pubDate>
            <description><![CDATA[Solving design problems by building Figma plugins. ]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/732eced0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Thinking in design-code]]></title>
            <link>https://kejk.tech/thoughts/thinking-in-design-code</link>
            <guid>641b3f9cd0ab1034f24698bb</guid>
            <pubDate>Sat, 04 Mar 2023 10:42:49 GMT</pubDate>
            <description><![CDATA[My personal approach on how to think about code from a design perspective and how to implement those changes.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/4ac58060-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[What a cult taught me about 'limiting beliefs']]></title>
            <link>https://kejk.tech/thoughts/what-a-cult-taught-me-about-limiting-beliefs</link>
            <guid>641b3f9cd0ab1034f24698bc</guid>
            <pubDate>Sat, 04 Mar 2023 10:42:31 GMT</pubDate>
            <description><![CDATA[You should never feel like you have no limiting beliefs, but you should always fight to overcome them.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/411f68a0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Ten Principles for Good Design]]></title>
            <link>https://kejk.tech/thoughts/ten-principles-for-good-design</link>
            <guid>641b3f9cd0ab1034f24698bd</guid>
            <pubDate>Sat, 04 Mar 2023 10:42:16 GMT</pubDate>
            <description><![CDATA[I decided to put together a free, multi-device, minimal wallpaper of Ram's ten principles. ]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/37247a20-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[From problem to plugin]]></title>
            <link>https://kejk.tech/thoughts/from-problem-to-plugin</link>
            <guid>641b3f9dd0ab1034f24698be</guid>
            <pubDate>Fri, 24 Mar 2023 09:10:00 GMT</pubDate>
            <description><![CDATA[Learning Typescript, the Figma API and solving a real personal problem.]]></description>
            <content:encoded><![CDATA[### Background

As I've mentioned before, I've long had a passion for learning new skills and that's especially true when it comes to picking up new frontend development skills.

When I started learning [Vue](https://www.vuejs.org/), I chose to utilise the [Vuetify](https://www.vuetifyjs.com/) library to speed up the process and allow me to focus less on creating CSS and more on learning the necessary JavaScript and language specifics. Using the Vuetify library taught me the basics of working with APIs to leverage specific behaviour.

When I moved over to using [Figma](https://www.figma.com/) as my main design tool outside of my day job, I wanted to find ways to make the process of handing over to development easier. Although Figma does a great job of handling [developer handoff](https://www.figma.com/best-practices/guide-to-developer-handoff/), it renders the font sizes as pixels much like any other design tool does.

### The solution

I was desperate to have an easier way to provide the relevant Rem or Em values to developers (including myself) so that I didn't have to find an online converter or just make up random values to try and find the closest match. And that's how [Px ›› Em](https://www.figma.com/community/plugin/837070613195594890/Px-%E2%80%BA%E2%80%BA-Em) was born.

Over one evening, I was able to dig into the [Figma API documentation](https://www.figma.com/plugin-docs/api/api-overview), make sense of what was possible and create a basic proof of concept that did what I needed it to do.

### The final output

Over the course of the following few days, I made adjustments and updates to the plugin, enabling some extra functionality for changing the base Px value from the browser default of 16px and also allowing for the conversion ratio to be changed based on some common scales (including the Golden Ratio).

#### The core Px ›› Em functionality is:

*   Open the plugin without selections to convert any number to ems
*   Select a text node anywhere in your files and open the plugin to see the current pixel value and convert it to ems
*   Change the current selection to update the input value and enable a new conversion
*   Change the baseline px value to whatever you want it to be and see the relevant changes in em conversion
*   Change the scale by which you want to convert based on common scales used

Creating the code wasn't as complex as first anticipated, so here's a snippet of how the actual calculation works as a function.

```javascript
function pxToEms(px){
 var baseValue = 
  document
   .getElementById('newPx')
   .value;
 var scale = 
  document
   .getElementById('scale')
   .value;
 function calculate(){
 return(px / baseValue)* scale;
 }
 return calculate;
}
```]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/2de2f090-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Don’t let your role define you]]></title>
            <link>https://kejk.tech/thoughts/dont-let-your-role-define-you</link>
            <guid>641b3f9dd0ab1034f24698bf</guid>
            <pubDate>Fri, 24 Mar 2023 09:06:48 GMT</pubDate>
            <description><![CDATA[A practical guide on how to navigate your career when the path you're heading down isn't the one you truly want.]]></description>
            <content:encoded><![CDATA[###

This article started off life as an essay on my career. But as I wrote it I realised that as great as that was to me, it'd be more useful for me to provide some key takeaways that you can use in your own career to push to where you want to be. These are my five key things to remember about your career. What you do doesn't define you. You can be whoever and whatever you want to be, just keep believing in yourself, and keep pushing down that path one inch at a time.

### Just because you started down one path, it doesn't mean you can't change to another

###

I started out in retail sales, moved through to account management, then into technical leadership and now into design. None of this was by accident but it certainly wasn't planned. I just kept pushing for and pursuing the path I wanted and felt most comfortable in. You need to do the same. A lot of employers admire people who've trodden a unique path because they bring skills others wouldn't. Be that person.

### Fight the voice inside that tells you that you're not worthy

###

There isn't a day that I don't experience imposter syndrome. I'm constantly in disbelief that I'm actually a designer somewhere. I'm still convinced I "shouldn't be allowed" because I followed an unconventional path. But I am a designer, I do that job and I do it well. It's hard to fight the negative feelings but you have to remember that you were hired for a reason. You didn't lie to get there (hopefully), so just keep doing what you do. Someone will tell you if you're not up to scratch.

### Don't be afraid to learn

###

This one is probably obvious, but seriously, keep learning. I've never stopped trying to get to the bottom of things and become better at the core skills I need to deliver my job. But equally, I keep pushing to learn more. Teaching myself SwiftUI so I can feel closer to engineering's implementation of our designs, teaching myself Javascript frameworks to be able to build my own personal site and understand the basics of APIs. These are all fundamental to the products we ship, as designers we should know how they work too. Speak in the same language as your developers, it'll save you all so much time and build a stronger team. Trust me.

### Be comfortable with being uncomfortable

###

Get uncomfortable. Push yourself to that point. Then sit there, in it, for a while. Get used to that feeling, it'll help massively with that voice that tells you you're not worthy. The more you get used to feeling uncomfortable, the more you'll be comfortable with it. Psychologists often use [exposure therapy](https://www.psychologytools.com/professional/techniques/exposure/) to help people overcome their fears. Slowly introducing them to the thing that makes them uncomfortable for longer and longer times until they eventually become comfortable. Do that to yourself. Offer to do a Lunch and Learn on a topic to the entire team, take on that Webflow project when you've never used it before, offer to man the phones for a couple of hours to deal with customers. Whatever makes you uncomfortable, push yourself to try it, you'll see it's not that bad and you'll grow tenfold because of it.

### Don't give up

###

If you've not had that flip yet and you're still in a role you feel defines you even though it's not the "you" you want to be; don't give up. Seriously. It can feel like it's never going to happen. Trust me, I've been there. But if you focus on the earlier steps and commit to that journey, you'll get there. Seek opportunities in your current business to push into areas you want to be in, even be as bold as to ask your manager if there is any chance. You never know, that career flip might be right in front of you, you just need the courage to ask.]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/2557e5c0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How music, design and code are all the same]]></title>
            <link>https://kejk.tech/thoughts/how-music-design-and-development-are-all-the-same</link>
            <guid>641b3f9dd0ab1034f24698c0</guid>
            <pubDate>Fri, 24 Mar 2023 09:05:31 GMT</pubDate>
            <description><![CDATA[I wouldn't say I believe creativity is a gift we're born with. I don't believe my abilities are.]]></description>
            <content:encoded><![CDATA[###

I wouldn’t say I believe creativity is a gift we’re born with. I don’t believe my abilities are. But what I think I do have is a natural tendency towards patterns.

The more I’ve look introspectively at myself lately, the more I’ve come to see that the “red thread” through the three things I’m best at and enjoy, is patterns.

The idea that music, design and development are all ultimately the same at their core has occurred to me many times, most recently when I was listening to the radio. The reason? The specific patterns (né: formula) pop songs all stick to.

## Pop songs

###

There’s only so many pop songs in the world, and they’ve already all been written, rewritten and written again. The people who write them are aware they’re not new, they want that to be true, because there’s a set of sequences that work and work well. Why diverge from them? People like familiarity, it’s human nature.

Design and development for that matter are the same. Design patterns are critical for making something pleasing to the eye. Early in most creative classes you’ll learn about the oft touted “Golden Ratio”. This particular number (1.618) when used as a compositional spacing rule, leads to the most pleasing results mathematically which happen to be aesthetically pleasing too. Why? Pattern recognition.

## Understanding this article

###

Littered throughout this article are links to other articles and websites. This is deliberate and not due to laziness. Lots of clever people have written great pieces on the things I’m talking about here, so my goal is to collate a series of these thoughts into an abstract of sorts. Think of this like a meta-analysis of these other thoughts.

### The golden ratio and nature

###

If we break down nature’s patterns, we can find the [golden ratio everywhere](https://www.treehugger.com/how-golden-ratio-manifests-nature-4869736). Its in the snowflakes that fall in winter, the leaves that grow on trees, the scales on a fish, or the way a forest grows.

There’s a reason it exists everywhere, its because it creates aesthetically pleasing results. Nature is an incredible thing and the results are beautiful. If we use those patterns ourselves in music, design and development, we get beautiful results too.

So lets break down some of the similarities between the mediums by picking some core terminology and finding some examples.

### The rule of thirds

###

In photography there’s the concept of the [Rule of Thirds](https://photographylife.com/the-rule-of-thirds), where you aim to create a pleasing proportion to your image by aligning the subject to different thirds within their containing frame. Just like all creative rules though, sometimes breaking them leads to more intriguing results, and this is very common when using the rule of thirds.

In design we can use the rule of thirds when [laying out a website or app](https://designwebkit.com/web-design/rule-of-thirds-web-design/), or when composing an article. It can often help us to pair the notion of the rule of thirds with grid layouts. Pairing the two can lead to interesting and dynamic layouts whilst maintaining logic and legibility.

In music we can use the rule of thirds in many ways, mostly it’s a logical way to think about breaking up a composition. Take a traditional [pop song](https://www.teenstarcompetition.co.uk/advice/how-to-write-a-pop-song): intro, verse, chorus, verse, chorus, bridge, middle eight, chorus. Here, to create the catchy moment people always look forward to in songs, often the end of a pop song leverages the idea of using a bridge, then a middle eight (which is often a stripped down version of the same chorus melody) and then ending with a big final chorus. This use of a triad is one of the major reasons pop songs feel so catchy, they’re predictable.

Design and development layouts should also maintain predictability, this predictability is what makes a design usable and pleasing to look at.

### Grids

###

Depending on who you are, [grid systems](https://www.interaction-design.org/literature/article/the-grid-system-building-a-solid-design-layout) are either a blessing or a curse. If we think about them the same as the rule of thirds then we’re on the right path. Grids can be used as a definitive approach to layout or be used as an element we purposely break to provide a unique aesthetic approach. Either one is acceptable, it’s just up to you and your layout intention.

In music we have a similar principle to grids in instrumental composition. Choosing how to “[arrange](https://youtu.be/S8fZ62FrquQ)” instruments is vital to the feel of a song. We can choose to have all instruments playing at once, or start with just one and build it up. Similar to grids, we can use different structural layouts to create the final song, and those different structural layouts dramatically impact the feel of the piece.

### Colour theory and white space

###

[Colour theory](https://99designs.co.uk/blog/tips/the-7-step-guide-to-understanding-color-theory/), surely there isn’t a corollary to anything in music here? Well, not so fast there champ. We can make a comparison here to the idea of harmony. Colour theory is the idea that selecting colours that are opposites on the colour wheel leads to a pleasing compositional choice as they balance each other out. Why is that? It’s because they contain the opposite values, this fills out the colour spectrum to its whole.

In music we have a similar thing. Have you ever wondered why the majority of songs contain drums, bass, guitars/synths and vocals, for example? It’s not by chance, its because these instruments fill the entire audible spectrum humans can perceive. There are only so many frequencies that we can hear, by filling space in each of them we can create audible balance.

Then, in both cases, we can play on this idea by breaking these rules at certain moments. Think of the famous “[bass drop](https://dj.dancecult.net/index.php/dancecult/article/download/451/457)” in dance music, or dropping to one guitar before all coming back in, or even moments of complete silence. These are tactics musicians use to create space in the composition and therefore generate the drama and anticipation of when it kicks back in.

In design we do this too by using [white space](https://blog.prototypr.io/importance-of-white-space-in-design-5a40c0e65bfd) to create a void between the content and colours, creating impact when we drop back in to the palette. We can also do this by dropping to a single colour for a moment and then bringing back the contrast of our secondary opposite colour to fill the visual out.

### Rhythm

###

You can keep all your instruments together following the same rhythm and harmony. This is pleasing to the ear in the fact that it feels together and its easy to nod your head to. Alternatively, you can mix different rhythms or harmony’s to produce interesting results. In music we have what’s known as a [polyrhythm](https://mathdrumming.com/polyrhythms/). This is a rhythmic device where an instrument maintains a rhythm that falls outside of the time signature of the composition but, thanks to some maths, falls back into time within a later phrase of the other instruments rhythm.

Similarly, in design we can use rhythm and harmony when we think about a layout. When laying out [typography](https://www.jeroenseynhaeve.com/pythagoras-and-vertical-rhythm-in-typography/), rhythm and harmony are words that often come up. That’s because what makes typography often feel pleasing to look at and read is the consistency by which the elements are laid out. If we break this typographic rhythm then it can either have pleasing results (such as for a poster design) or feel unbalanced and terrible because of a lack of visual consistency.

### Time signatures and pacing

###

Much like rhythm, we can use other mathematical devices to play with our composition. Pacing is key to this, it allows us to think about how fast and slow the entire song should be, but also the speed of each section. Is it full time, is it half time. Playing with the pacing is another device we can use to change the feel between sections and drive impact.

If you ever listen to music I’ve written for Echoes, we play on this idea quite often by leveraging the drama of half time. We love dropping to a final half time ending on a lot of our songs. We do this deliberately because it provides the drama and release that the build up to the moment expects.

In design we can do this too by building up different layers of composition. By having sections of your design filled with an image, text and buttons, then dropping to a section with just a single centre-aligned paragraph, then an image, and then back into a full section with all elements. Doing this creates visual drama and dynamism. It also helps to draw attention to the right things at the right time.

Equally, we can play with [time signatures](https://www.musicnotes.com/now/tips/a-complete-guide-to-time-signatures-in-music/) which allow us to create different dynamic rhythms to create more unique feels. Jazz is full of this, but so is a lot of modern metal music.

Rap and hip hop use a very common layering of 4/4 backing rhythms and then rapping in [triplets](https://hellomusictheory.com/learn/triplets/) over the top. This is what makes the vocals feel like they’re running at a faster pace than the lyrics and feel really fluid. You can count 1, 2, 3 in fast succession over the 4 measures to hear how it works.

In design we can use this idea visually by using contrasting grids on top of each other. Think how it would look to have your type laid out evenly over a 4 block grid but spaced as if it was a 3 block grid. It would create interest by adding additional white space between the words, creating a more intriguing rhythm.

### Combining our principles

###

In the below example, the navigation bar at the top and falls on the 4 column grid alongside the company logos at the bottom whereas the title section and hero image sit on a 3 column grid. Just like triplets fall inside a 4/4 rhythm, different grids can work in harmony to create more interesting layouts. This combines our principles of grids, rhythm, pacing, colour theory, white space and time signatures. Almost all of them!

![3x4 text on a 4x4 layout](https://cdn.cosmicjs.com/f6b51b10-8681-11ec-8e12-4f611a7927fa-Example-of-4x4-with-3x4.png)

You’ll likely find that you often combine many of these principles, and if you’ve been designing or developing projects for a while then you may find you naturally use a lot of these techniques. Ultimately, this post aimed to show how similar all of these skills really are and how a common thread of pattern-based logic can lead to aesthetically pleasing results.
]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/1c669f10-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[‘Users’ are humans]]></title>
            <link>https://kejk.tech/thoughts/why-users-are-humans</link>
            <guid>641b3f9dd0ab1034f24698c1</guid>
            <pubDate>Fri, 24 Mar 2023 09:02:54 GMT</pubDate>
            <description><![CDATA[Design is about people, and I've been thinking a lot about the problem of the term 'user'.]]></description>
            <content:encoded><![CDATA[### Design is about people.

##

Working in the healthcare sector, it’s sometimes hard to forget those people that you affect the most through the work you do. It can be right there in front of you, seeing children living longer lives because of the work you and the healthcare company you support do. But it’s also sometimes easy to think about those end individuals as ‘users’.

User Experience is a hot topic and has been for some time. Really, it was birthed in Silicon Valley as a way of thinking about the end person using your product and avoid a narrow focus on delivering a solution that you (as in the company) think is the right thing. The problem with a user focus is that it’s easy to abstract the term user into being a statistic. A user is a term we attribute onto a person that uses our product, but it is far too easy for that to become a percentage on a spreadsheet or a cumulative number that appears on an analytics report. Treating the people we affect most as users can have a negative effect on how we think about our products and lead us to believe that our focus is on increasing that percentage or building up those numbers, only.

### Why we should be Human-centred

##

Human-centered design is a term that's been explored and advocated for by many established designers from David and Tom Kelley, to Donald Norman and even into architecture by way of Mike Cooley.

My argument is for a permanant change, a move away from user-centricity and user experience and towards human-centricity and human-experience. By doing this, we can’t abstract away who we are affecting. Those directly effected are other humans and as such, it helps focus the mind on doing our best work and allows to think more wholly about what we’re creating.

Numbers are important, we need to keep an eye on those analytics reports and the statistics from audience feedback, but that needn’t draw away from the very humans that we are affecting. Sometimes, decisions that may seem bad statistically, are actually right ethically. Making decisions that directly impact on the humans using your product are often some of the hardest and most important. Losing sight of those real people that you’re affecting with every slight change of pixels on a UI, removal of ‘old’ functionality or choice of distribution platform, can have lasting effects on their respect for your company and the values you represent.

So think carefully about every decision you make as a brand and contemplate the impact on the humans you’re working for, because no matter what you believe, the other humans of this earth are the people you’re helping and those humans need you to care about them first. You work for them, whether it feels like it or not.

Humans are not users, users are humans.]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/f9d0b5f0-b9fe-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Designing API-first]]></title>
            <link>https://kejk.tech/thoughts/designing-api-first</link>
            <guid>641b3f9dd0ab1034f24698c2</guid>
            <pubDate>Fri, 03 Mar 2023 20:19:41 GMT</pubDate>
            <description><![CDATA[The power of  visualising your API as part of your design process to align the entire team]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/b70e7de0-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Relative seniority]]></title>
            <link>https://kejk.tech/thoughts/relative-seniority</link>
            <guid>641b3f9dd0ab1034f24698c3</guid>
            <pubDate>Fri, 03 Mar 2023 20:18:11 GMT</pubDate>
            <description><![CDATA[How your title is reflective of your company's stage as well as your level.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/81e15cf0-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Spatial Design]]></title>
            <link>https://kejk.tech/thoughts/spatial-design</link>
            <guid>641b3f9ed0ab1034f24698c4</guid>
            <pubDate>Fri, 03 Mar 2023 20:14:29 GMT</pubDate>
            <description><![CDATA[Product Design is a term we use broadly these days to define a designer who creates products.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/fdc1d0d0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The power of Cosmic]]></title>
            <link>https://kejk.tech/thoughts/the-power-of-cosmic</link>
            <guid>641b3f9ed0ab1034f24698c5</guid>
            <pubDate>Fri, 03 Mar 2023 20:13:45 GMT</pubDate>
            <description><![CDATA[Not too long ago I decided to set myself a challenge; create and add new content to my website via a CMS.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/e32427f0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Designing in the open]]></title>
            <link>https://kejk.tech/thoughts/designing-in-the-open</link>
            <guid>641b3f9ed0ab1034f24698c6</guid>
            <pubDate>Fri, 03 Mar 2023 20:13:07 GMT</pubDate>
            <description><![CDATA[What I’ve learnt about sharing constantly and live designing with my team.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/ccf4fcc0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Code as Design]]></title>
            <link>https://kejk.tech/thoughts/code-as-design</link>
            <guid>641b3f9ed0ab1034f24698c7</guid>
            <pubDate>Fri, 03 Mar 2023 20:12:46 GMT</pubDate>
            <description><![CDATA[How development can be learned through a design lens (and how I've managed to do it). ]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/bfd94640-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Getting to yes]]></title>
            <link>https://kejk.tech/thoughts/getting-to-yes</link>
            <guid>641b3f9ed0ab1034f24698c8</guid>
            <pubDate>Fri, 03 Mar 2023 20:10:59 GMT</pubDate>
            <description><![CDATA[Why I think designers and developers should learn the basics of sales. ]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/7fe0a060-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Design as Code]]></title>
            <link>https://kejk.tech/thoughts/designing-in-code</link>
            <guid>641b3f9fd0ab1034f24698c9</guid>
            <pubDate>Fri, 03 Mar 2023 20:10:35 GMT</pubDate>
            <description><![CDATA[What learning Vue has taught me about the future of design, development and the modern web.]]></description>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/718b5870-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
    </channel>
</rss>