<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>KEJK | Writing</title>
        <link>https://kejk.tech</link>
        <description>Thoughts on design, development and career progression</description>
        <lastBuildDate>Mon, 10 Apr 2023 14:07:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Feed for Node.js</generator>
        <language>en</language>
        <image>
            <title>KEJK | Writing</title>
            <url>https://kejk.tech/logo.svg</url>
            <link>https://kejk.tech</link>
        </image>
        <copyright>All rights reserved 2023, Karl Emil James Koch</copyright>
        <item>
            <title><![CDATA[Why I don’t charge for my side projects]]></title>
            <link>https://kejk.tech/thoughts/why-i-dont-charge-for-my-side-projects</link>
            <guid>641b3f99d0ab1034f24698ac</guid>
            <pubDate>Sun, 09 Apr 2023 11:32:58 GMT</pubDate>
            <description><![CDATA[The minute money exchanges hands, the relationship changes drastically]]></description>
            <content:encoded><![CDATA[<p>The minute money exchanges hands, the relationship becomes one of customer and seller. And that implicit relationship makes a huge difference in what your customer perceives you’ll do, and what you actually should do. </p>
<p>Providing the tools you build for yourself, to others, for free, is a way to give back to a community that likely gave you free things during your early career and helped you to move forwards. </p>
<p>Capitalist society encourages us to sell everything because that’s how we “must progress as a nation”. But providing tools to help other people in your industry or profession for free, if you can, provides a way to give back and open up access to those less fortunate and in need of a good start. </p>
<p>Figma recently opened up <a href="https://www.figma.com/blog/figma-creator-tools/">paid community assets</a>. I’ve been vocal with people I know there about my worries with this move. Understandably, with the sale to Adobe possibly still happening (<a href="https://www.reuters.com/legal/us-preparing-antitrust-suit-block-adobe-plan-buy-figma-bloomberg-news-2023-02-23/">or not</a>), there needs to be other revenue streams beyond just subscriptions to the service but I’m not sure this is it.</p>
<p>I’m a huge fan of Figma and what their platform opened up for me. Building plugins got me more interested in learning how to better code for other platforms via APIs and how to think about making ideas work for people other than myself. But this idea of paid community resources worries me.</p>
<p>In reality, I understand why it’s the move they took and I can see the value if it works well. But if we look at the two major mobile App Store’s and their levels of app <a href="https://www.theregister.com/2022/05/10/ios_android_stores_host_more/">abandonware</a>, it’s shocking and worrying that the same will become true for Figma. Equally, making payment integration <em>easier</em> opens up even more opportunity for abuse by people looking to make a quick load of money and then bail.</p>
<p>Now that it’s easy to integrate first-party payments, I think we’ll see a wave of people building shitty experiences and charging for them in the hope of making a quick buck. It’s possible that the opposite will happen, and that we’ll actually see higher quality resources put together, and I really hope that's true. But with that we’ll see a barrier to access by default. Paid resources are inherently inaccessible for those on lower incomes or new to their career.</p>
<p>I’m also massively concerned about customer support. What happens when people have a bad experience with a lax developer? Is Figma responsible for handling all of the refunds and support? Or are developers doing it like they do now? That relationship changes vastly once things become chargeable. Just look at the Apple App Store.</p>
<p>I’ve said vocally before that I produce my plugins in the hope they get <a href="https://www.plugins.run/about">integrated to Figma</a> by default. And this happened for both find and replace, and, better native scaling. But, how does that work in a world where I’m charging for these features? Would Figma pay me for lost revenue because I solved a problem in their product? I doubt it.</p>
<p>We’ll see how things go on this front, and despite the tone of this article I am optimistic that people are inherently good. I'm also optimistic that this move from Figma <em>wasn't</em> just about additional revenue and was instead a way to pay back developers for building an insanely big pool of resources mostly for free.</p>
<p>I understand that this is absolutely a very one-sided view, and I’m not opposed to people making money. But from what I’ve seen of people charging money via awkward payment processes and providing subpar and underdeveloped products so far, it doesn’t give me much hope just now. </p>
<p>The more the world becomes paywalled, the more we lock people out who need help the most.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/00f906c0-6262-11ec-a8a3-53f360c99be6-placeholder2x.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[AI as pair design]]></title>
            <link>https://kejk.tech/thoughts/ai-as-pair-design</link>
            <guid>641b3f99d0ab1034f24698ab</guid>
            <pubDate>Fri, 07 Apr 2023 19:32:25 GMT</pubDate>
            <description><![CDATA[The ultimate design companion is just around the corner]]></description>
            <content:encoded><![CDATA[<p>These days, there’s always a constant influx of new things to learn as a designer. We had the great “should designers code” debate; we also had accessible 3D crop up with new Figma-like tools such as <a href="https://spline.design/">Spline</a> to learn; we had NFTs where you needed to grasp the concept of tokens and fungibility; and finally we have AI, where you need to learn how to integrate it into your workflow to avoid “<a href="https://www.theguardian.com/commentisfree/2023/jan/24/chatgpt-artificial-intelligence-jobs-economy">losing your job</a>”.</p>
<p>Granted, no, you don’t have to actually learn all these tools or ways of working. But as Designers and Developers, we’re often curious by nature and keen to be on the bleeding edge of technologies. Naturally that means we want to try things out, but importantly we also sometimes have to because our company (or companies we want to work for) expect us to.</p>
<p>Recently there’s been a lot of discussion about how AI could finally be after our <a href="https://medium.com/microsoft-design/yes-ai-will-replace-designers-9d90c6e34502">design</a> or <a href="https://medium.com/geekculture/will-ai-replace-programmers-fb6fcfd70b37">development</a> jobs. Like always with AI, it’s seen as an inevitability and that maybe we need to start looking for new things to be good at. <a href="https://indieweb.social/@kylelambert">Kyle Lambert</a> wrote a <a href="https://www.imkylelambert.com/articles/will-ai-take-my-design-job">great piece</a> on this recently. </p>
<p>In reality, yes, AI may soon get good enough to do some of the tasks of a designer. But critically, it’s still very much at the early stage where it simply copies things from the internet and attempts to sometimes create something slightly new, but that normally always has flaws.</p>
<p>The more I’ve been playing with Chat-GPT which is <a href="https://openai.com/">OpenAI</a>’s playground for its <a href="https://openai.com/blog/gpt-3-apps/">GPT-3</a> Large Language Model (LLM), the more I’ve gotten interested in treating it more like a companion than a threat. More like a pair designer or pair developer, helping me get around thorny problems or simply just kick of a project.</p>
<blockquote>
  <p>Instead of assuming AI will take our jobs, we can assume it’ll become the best pair designer/developer to help us get started.</p>
</blockquote>
<p>I recently spent some time using it as a copywriting assistant when designing mocks.</p>
<p>I can ask it a quick phrase like “Write a headline that helps explain the importance of investing compared with saving into an interest-bearing account over the long term” which gives me the response “Investing for the Future: A Look at How Smart Investing Beats Out Saving for Retirement”. Not bad really!</p>
<p><img src="https://imgix.cosmicjs.com/77d1b720-9ee7-11ed-aca2-37db769eb59f-AEB814E6-2BB5-4EAE-908F-2DFAA9920AF5.jpeg" alt="Image of the first copy request and answer inside the Arti interface" /></p>
<p>What about “Write three bullet points for an app that helps explain the importance of investing compared with saving into an interest-bearing account over the long term” instead? This gives me:</p>
<ul>
<li><p>Investing in the stock market, mutual funds or other types of investments can result in higher returns than the interest rate on a traditional savings account.</p></li>
<li><p>Investing allows your money to grow faster over the long term, allowing you to take advantage of compound interest.</p></li>
<li><p>Investing allows you to diversify your portfolio and protect against market fluctuations, providing valuable protection for your savings.</p></li>
</ul>
<p><img src="https://imgix.cosmicjs.com/77dcb3a0-9ee7-11ed-aca2-37db769eb59f-BEC501B5-CCA8-4722-B465-5E874953C3A7.jpeg" alt="Image of the second copy request and answer inside the Arti interface" /></p>
<p>Also really not bad at all. And if anything, a helpful jumping off point to refine based on our copywriting style.</p>
<p>AI pair design will also provide a great mechanism for fast iterations on an idea. Think of it as the ultimate Crazy 8’s companion. Feed it the initial concept and let it go wild for you. These tools will also be able&nbsp;to quickly evaluate hundreds of design solutions and narrow them down as quickly as possible. This means that the design process can be completed much faster than if it were done by humans. Equally, they can also be programmed to automatically adjust parameters and learn from their mistakes, allowing them to continuously improve the design and produce more reliable results with added accuracy.</p>
<p>But this is more a future thinking concept when tools powered by <a href="https://openai.com/dall-e-2/">DALL-E</a>, <a href="https://www.midjourney.com/home/?callbackUrl=%2Fapp%2F">Midjourney</a> or other new AI models improve. Right now, the image generation is incredible but it doesn’t really hit the mark for consistently good app ideas, it’s much more useful for fantasy images.</p>
<p><a href="https://diagram.com/">Diagram</a> have started to play with some interesting ideas here via their <a href="https://magician.design/">Magician</a> plugin for Figma. As a way to generate quick icon iterations, UI and marketing copy or image ideas, it’s a fantastic tool to speed up your workflow. But it can’t replace an amazing icon designer, illustrator or copywriter right now.</p>
<p>Ultimately we’ll still need the human in the loop to ensure designs connect well with the people who’ll interact with them. It’s naive to think AI will be capable of human-level empathy any time soon or to make real, “conscious” decisions off the back of internal feedback. But one day we’ll likely get there.</p>
<p>I think we’ll see an entire industry boom around the design of great prompts soon too. Imagine feeding an AI with the perfect prompt to generate amazing outputs. We’re seeing this happen in the form of shared prompt spreadsheets or other <a href="https://prompts.chat/">websites</a>, but there’ll likely be entire businesses that help you generate great prompts that generate great outputs. Then, eventually, we won’t need those anymore and we’ll just skip straight to great outputs from any prompt.</p>
<p>I think it’ll be important for us to embrace this new reality. Eventually every product will be powered in some way by AI, some are even already betting on it as part of their product strategy [<a href="https://www.notion.so/product/ai">1</a>, <a href="https://www.raycast.com/ai">2</a>]. So if you’ve not tried out GPT-3/3.5-turbo/4 and want to give it a go on iOS or macOS then you can <a href="https://apps.apple.com/gb/app/arti/id1659936985">try out an app</a> I built for myself but decided to put out there. It’s a simple native companion that uses OpenAIs API to provide responses based on text input. You can read more about <a href="https://kejk.tech/arti">here</a>.</p>
<p>I encourage you as a designer to embrace it to shortcut the more tricky part of mocking designs—coming up with fake but realistic copy—and let me know if Arti proves useful. As a developer, I’d encourage you to play with <a href="https://github.com/features/copilot">GitHub Copilot</a> again if you’ve not in a while, it’s incredible and powered by Codex from OpenAI (which you can also use in Arti’s Chat tab).</p>
<blockquote>
  <p>Update: a great article from Geoffrey Litt about thinking of ChatGPT as the <a href="https://www.geoffreylitt.com/2023/02/26/llm-as-muse-not-oracle.html">ultimate muse</a>.</p>
  <p>Update: another great take from <a href="https://matthewstrom.com/writing/design-by-wire/">Matthew Ström</a> comparing AI in design to the notion of flying-by-wire. </p>
  <p>Update: GitHub recently announce <a href="https://github.com/features/preview/copilot-x">Copilot X</a> which is the GPT-4-powered version of their prior Copilot offering.</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/db630760-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Two weeks and five lessons]]></title>
            <link>https://kejk.tech/thoughts/two-weeks-and-five-lessons</link>
            <guid>641b3f99d0ab1034f24698ad</guid>
            <pubDate>Fri, 07 Apr 2023 08:54:40 GMT</pubDate>
            <description><![CDATA[Lots of conversations, tasks, research and reading later]]></description>
            <content:encoded><![CDATA[<p>When on the outside looking in during an interview process, you can learn a lot about a company. By reading the docs they send you, looking for Glassdoor reviews or by asking questions at interview stage. But until you’re actually there, you don’t know if you made the right choice. </p>
<p>DuckDuckGo runs very differently to places I’ve worked before, but the way it runs is incredibly exciting and offers a whole host of opportunities to do your best work. </p>
<p>Below are the top five things I’ve noticed so far. </p>
<h2 id="1levelsdontmattersodontbringthemup">1. Levels don’t matter, so don’t bring them up</h2>
<p>We have a rule internally that we don’t share our level anywhere except in an external public forum (for example, LinkedIn) and that’s only if we want to. </p>
<p>By removing our levels from the conversation, the best ideas and best opportunities rise to the top no matter where they came from.</p>
<p>This means that meetings involving C-suite, VP’s and others don’t lead to top down solutions. They create open spaces for discussion. Yes it’s possible to find out people’s level (obviously you’ll know the C-suite) but this approach is disarming and provides space for everyone to have maximum impact.</p>
<p>We still have assigned people who lead specific objectives, but they’re just the directly responsible individual, not necessarily the final decision maker. This approach opens the floor for anyone at any level to have equal or outsized impact, but with ownership falling on the lead for that objective as a point of last resort.</p>
<h2 id="2salariesareleveldependentnotroledependent">2. Salaries are level dependent, not role dependent</h2>
<p>It doesn’t matter what you do, whether it’s design, development, data science, social media etc. What you earn is relative to your level. So there’s no fighting over why one team are paid more than another. We all earn the same, because our value to the business is the same. Again, this has a disarming effect, allowing us to focus on doing our best work and not on whether we’re earning the same as the other people in the virtual room we’re in.</p>
<p>This also means it’s really easy to see a path forwards from where you are and to understand what the potential is for levels and roles as they’re globally the same.</p>
<p>Inline with point 1, the fact that all roles earn equal salaries helps with preventing an attitude of passing blame or feeling something is “above your pay-grade” because someone else in the room is "probably" earning more than you.</p>
<h2 id="3wewriteeverythingandimeaneverythingdown">3. We write everything, and I mean everything, down</h2>
<p>Writing everything down makes it possible for anyone to go back and see why a decision was made, even if that decision was made in 2015… it’s immense and quite overwhelming to begin with, but makes all the difference as a newbie to the company.</p>
<p>This also means that onboarding is fully self-directed (much like a lot of the work we do here), so it’s possible to onboard in your own time and it doesn’t take people out of their responsibilities to be constantly trying to help you along (although they will if you ask!).</p>
<p>We also ensure that project conversations are captured for all to see and discover. We use Mattermost (an open source Slack alternative) for synchronous text conversations, but Mattermost automatically clears after a week so that we're encouraged to leverage Asana for project conversations.</p>
<h2 id="4fullyremoteworkcreatesbetterworklifeboundaries">4. Fully remote work creates better work/life boundaries</h2>
<p>In our modern world, we have lots to do and the typical 9-5 office model restricts this. Fully remote, and predominantly asynchronous work, enables better work/life balance by allowing you to get your work done when it suits you. </p>
<p>Those times can shift day to day. If you’ve got an appointment, no need to take half a day off, just go to it and make up the time later or when it suits you. As long as you deliver, it doesn’t matter when you did it or how long it actually took to complete. No-one is watching to see how long you've been online or when you last sent a message.</p>
<p>Obviously the flip side of this is that it can be possible to work different hours to your significant other in order to meet with overseas colleagues and this may create complexity with home routines. It’s important to be able to say no to meetings (and we encourage this!) if they’ll interfere with your personal life regularly.</p>
<p>Most importantly, on Wednesdays and Thursdays we have a rule that no recurring meetings take place. This gives space for deep work and is followed to the letter company-wide without question. Sporadic meetings can take place on these days, but they're not commonplace.</p>
<blockquote>
  <p>Update: If you need a hand with balancing work and life, try out my buddy Alexander Sandberg’s app <a href="https://apps.apple.com/app/id1637311725">Balance</a> for macOS to remind you about mindful breaks and to help you keep track of the time you’ve spent working.</p>
</blockquote>
<h2 id="5anyonecantakeonanyprojectatanytime">5. Anyone can take on any project at any time</h2>
<p>You can propose a new project idea or pick up anything in the pool of ideas at any time. There’s no restrictions around a person being tied to one siloed product area. If I want to work on the Mac browser for a project cycle and then shift to the Extension, Search, Mobile apps etc., then I can. </p>
<p>This flexibility creates an almost agency-like model but tied to a single vision. This also prevents possible boredom or burnout from working on a single part of a product relentlessly.</p>
<h2 id="trustmatters">Trust matters</h2>
<p>Overall, the most important lesson in all of this comes down to trust. In every role I've looked for, and every interview conversation I've had, I've always prioritised asking about trust within the organisation. It's vital to me that I'm given the space and trust to do my best work. I don't want to be micromanaged, especially not at this stage in my career. </p>
<p>Based on the above observations and many conversations, it's ultimately the most critical part of what makes the company work. Without implicit trust in everything and everyone, the company would simply cease to function at the speed, with the level of quality of polish, that it currently does. </p>
<p>Our growth has been very intentional, relative to other tech companies out there, our team is still small and nimble. But this means trust is essential and the rewards are there for all to see and benefit from. </p>
<hr />
<p>If you’re looking for your next opportunity, check out some of our current <a href="https://duckduckgo.com/hiring">open opportunities</a>. </p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/057abe20-ba7a-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Digital Playgrounds]]></title>
            <link>https://kejk.tech/thoughts/on-digital-playgrounds</link>
            <guid>641b3f99d0ab1034f24698ae</guid>
            <pubDate>Sat, 04 Mar 2023 10:47:47 GMT</pubDate>
            <description><![CDATA[Why creating stuff for yourself is the best way to learn a new technology or how something works]]></description>
            <content:encoded><![CDATA[<h2 id="buildingforfunbysolvingproblemsyouface">Building for fun, by solving problems you face</h2>
<p>I've always been a bit of a nightmare when it comes to trying to solve problems for myself. I can't help myself, I just end up spending time tinkering to try and speed up my workflow and improve the outcomes of what I'm doing for future me.</p>
<p>Where it becomes a nightmare is when I spend more time on trying to solve the problem than I do actually taking advantage of the solution…</p>
<p>I've always felt that creating stuff for yourself is the best way to learn a new technology or how something works. Tutorials in a lot of ways are great, but you'll retain the info much better <em>and</em> keep coming back to learn more about it, if what you build benefits you personally and solves a real problem you regularly face.</p>
<p>Let's face it, whilst you can learn things from building yet another to-do list app, is that something you really need (he writes, via his home-grown markdown editor he didn’t need to make). </p>
<p>I started tinkering with my personal website (from <code>HTML</code> and <code>CSS</code> to <code>Vue</code> and then <code>React</code>), then got into hacking around Figma plugins to make designing easier, which then got me into writing SwiftUI apps to improve the rest of my workflows. But I also ultimately want to better understand any technology I’m interested in designing for. I’ve never felt I can design to the best of my ability unless I’m able to understand how the sausage is made. </p>
<p>But more than that, tinkering and building things for myself makes my life easier and keeps me deeply interested in the evolution of design and technology. It keeps me at the forefront of aspects of it and helps to ensure I don’t design for ideas that were 5-years-ago-good.</p>
<p>The biggest thing I’ve found is to be logical, take your time and step up slowly from simple to complex. My first app was just a basic pixel to rem calculator, then it could pass data between views via AppStorage, then I expanded to add other calculators, then adding widgets, and now it stores saved calculations in Core Data so it has persistence between restarts etc.</p>
<p>Recently I’ve been working on a series of micro apps that interface with the Cosmic API (my headless CMS of choice and also a team I work with). These little utilities allow me to extend the power of my CMS into native apps for my phone, iPad and Mac. They fundamentally make my life easier, but, they’re not essential. They’re also not release-worthy. And that’s okay, because they help me solve specific problems I have and allow me to more deeply understand the technology that interacts with the API, and also even better understand the API itself. This means, as the Design Lead, I can better understand what our end customers might also be trying to do with our API and therefore make suggestions and improvements to the API based on roadblocks I faced.</p>
<p>One example of this, was adding in the ability to edit content that was in a ‘draft’ state via the API itself rather than just within the web app. This was because I had blogs in draft on my Cosmic Go app that I wanted to tweak before I published. Helpful for me, but also, I couldn’t have been the only person needing this. I also had the backchannel to fix it and the visibility of the issue thanks to my tinkering. </p>
<p>In terms of those micro-apps; I’ve spent some time building an app that <a href="https://www.kejk.tech/cosmic-go">decodes JSON</a> from my Cosmic CMS to show me my bookmarks, blogs, features and some key stats—as well as letting me edit them too! I’ve built a simple media uploader that returns a Cosmic link to your clipboard, an app to write this very blog post in a super simple markdown editor that saves to iCloud using native plaintext files, and even an app <a href="https://www.kejk.tech/prompt-ai">powered by</a> GPT-3 to interface with ChatGPT, Codex and DALL-E.</p>
<p><img src="https://imgix.cosmicjs.com/7c3afb50-a3e2-11ed-8d58-2bb0c90a324a-Cosmic-Writer.jpg" alt="Cosmic Writer on macOS" /></p>
<p>If you use iOS or macOS and are interested in learning, I’d recommend you try SwiftUI, with live previews and a very declarative approach, it often feels like designing in code. It’s also super quick to pick up and build easy things. Check out Paul Hudson’s <a href="https://youtube.com/playlist?list=PLuoeXyslFTuaZtX7xSYbWz3TR0Vpz39gK">tutorial</a> series’, they’re amazing and save me ages of hunting around. Also check out this post by Stammy on <a href="https://paulstamatiou.com/getting-started-with-swiftui/">getting started with SwiftUI</a> as a Designer. Stammy also <a href="https://paulstamatiou.com/building/">wrote about building for yourself</a> a couple of years back. </p>
<p>If you want to check out some great examples of people with digital playgrounds, check out <a href="https://rauno.me/craft">Rauno Freiburg</a> for example, to see some neat stuff. Or <a href="https://www.itsjuko.com/playground">Julius Koroll</a> for more design-specific playing around. And finally, <a href="https://mastodon.design/@adrianmg/109794115937273202">Adrian Mato</a> has been playing around with building a game recently!</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/fd52e1f0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Shift gears and switch careers]]></title>
            <link>https://kejk.tech/thoughts/shift-gears-switch-careers</link>
            <guid>641b3f99d0ab1034f24698af</guid>
            <pubDate>Fri, 24 Mar 2023 09:53:18 GMT</pubDate>
            <description><![CDATA[I've talked about my history before, but I haven't provided explicit advice about how to switch careers]]></description>
            <content:encoded><![CDATA[<p>I've talked about my history before, but I haven't provided explicit advice about how to make a career switch effectively.</p>
<p>Over the past few months, I've been mentoring on&nbsp;<a href="https://www.adplist.org/">ADPList</a>&nbsp;which has been a really great experience so far. I've managed to learn a lot about my teaching style and also about what value I can bring to people beyond the typical portfolio review or interview advice.</p>
<p>One thing I've been mentoring on and am explicitly asked about is how I was able to successfully switch careers—from account management to design—without spending a single penny on a course from one of the big bootcamp providers. Granted, a few things had to fall in place to allow that, and there's a high element of luck, privilege and persistence that enabled the stars to align, but, I think it's possible for anyone if you look for the right opportunities in front of you.</p>
<p>So below is some of my key advice based on what I did, how I did it and why I think it's important. Try to look for any of these things if you're in a position to switch, and use them to your advantage to get there.</p>
<h3 id="1spotthesigns">1. Spot the signs</h3>
<p>The first thing is deciding when you think it's the right time to transition your career. Maybe you're getting bored in your current role, maybe you've spent your spare time exploring things that you'd like to do more permanently, maybe you find yourself not delivering on what's expected of you.</p>
<p>I noticed the latter one and that was my key trigger. I was an account manager at a startup digital agency in healthcare. I enjoyed the industry (to some extent) because the majority of projects we worked on were outcomes focused, in areas where people were often underserved/undertreated and where we could witness real results.</p>
<p>But I sucked at my job.</p>
<p>I was always forgetting the priority of tasks, I couldn't remember deadlines or manage my time effectively, I was good at client relationships, but fell short on ensuring all the team delivery aligned. Truthfully, I just wasn't cut out to be managing projects full time at that point in my career and I was also just not that into it. After being pulled aside a few times on this (sorry Lee!), I ended up being afforded the opportunity to explore managing just the digital projects, with a key focus on being the face for it in the company.</p>
<p>But why?</p>
<p>The partners saw in me some skills that I'd not really noticed. I'd been coding for many years behind the scenes but fell away from it a few years before I joined, I also had a fine art degree where I'd studied technology-based art, and I'd worked at Apple and developed a love of hardware engineering too. So there was a clear set of skills around technology and creativity that were being underutilised and there was a gap in the business for it. Success!</p>
<p>So rather than floundering around in a role I couldn't do well, causing the business to suffer as a result---and my career too. I was supported and encouraged to flip and start exploring a completely new avenue.</p>
<p>Thanks to Lee and the team, I got to learn on the job. I started coding again (in PHP for the first time, thanks Nick!) and began to learn Javascript again. I started to map out solutions to problems by creating information architecture maps and user journeys more seriously (I'd been doing these before, but had no idea what they all were, it just felt natural) and I had the chance to attend some industry events and learn more about the world of UX. And this was the beginning of my flip. The whole shift took around three and a half years, so it wasn't fast (and don't expect it to be), but that slow burn taught me a lot.</p>
<blockquote>
  <p>Pithy takeaway: Look for signs in your current role that you're underperforming or unhappy. This doesn't necessarily mean you suck at your job, it means you could be in the wrong job for you!</p>
</blockquote>
<h3 id="2findasponsorinternallyorexternally">2. Find a sponsor internally or externally</h3>
<p>Looking for someone to help you transition your role from within could be a great way to make the switch. It won't always make sense, and you won't always find it but it can have a major impact on helping you get to where you want to be.</p>
<p>In reality, there's two paths you can likely look to take:</p>
<ol>
<li>Find a sponsor within and make your move internally</li>
<li>Work behind the scenes and make the switch by switching companies and starting fresh</li>
</ol>
<h4 id="asponsorwithin">A sponsor within</h4>
<p>When utilising the sponsor within your organisation, you'll need to share your reasons for wanting to shift and likely in some ways interview for the switch (and possibly have to actually interview if it's an internal job advert).</p>
<p>Importantly, internal sponsors can open doors and unlock opportunity. In my case, one of the business partners gave me the chance to explore the things I appeared to be both better at, and more interested in, as a way to get out of the cycle of underperforming but also as a way to fill a hole that existed in the business but wasn't actively thought about.</p>
<p>Sometimes though, that internal sponsor isn't available, so your next option is to look outside.</p>
<h4 id="asponsoroutside">A sponsor outside</h4>
<p>If you need to look outside, scout your available network first before relying on applying for jobs. Remember that at this stage you've got zero track record of actually doing the job you want to, so you'll need to be conscious of how that'd appear to a recruiter.</p>
<p>No-one wants to be in the Nope Pile™ so do everything you can to not end up in it.</p>
<p>Although I found my sponsor within, once I started those new roles I had some very weird titles from our collective lack of understanding what I now did. I was a Digital Innovation Manager (what!?) and then a Digital Lead (🤷🏻‍♂️) and then finally a Lead UX Architect (better!).</p>
<p>Sometimes, when applying for roles later I massaged my titles into what they were in common parlance to make it easier for the interviewer or recruiter to figure me out. So I was a UX Designer and then a Lead UX Architect.</p>
<p>After that I moved to a new job and I ended up as a Senior Solutions Designer (what!?) so I called that a Senior Product Designer initially but have since swapped it to Senior Design Engineer because again, it more accurately reflects what I did.</p>
<p>None of this is lying, it's about making it easier for a recruiter to make sense of what you did if you've worked at companies that have non-traditional job titles.</p>
<p>When considering an external sponsor, look for someone who might be willing to take a punt on you. Search networks such as&nbsp;<a href="https://www.adplist.org/">ADPList</a>&nbsp;where you can find mentors, and if you impress someone enough, who knows what might happen! Equally, don't be afraid to scout Twitter for people you respect and send them a DM if you can, you'd be surprised how often they'd reply.</p>
<blockquote>
  <p>Pithy takeaway: Look for opportunities in your current role to start exploring things that interest you, narrow in on them and start exploring them. Aim to find a sponsor internally or externally that'll afford you the space to do it, and take that leap.</p>
</blockquote>
<h3 id="3findamentoroutsideofyourworkplace">3. Find a mentor outside of your workplace</h3>
<p>So on the subject of ADPList and mentorship, there's a lot of options out there. The reality with most mentoring is that it's normally a free service where industry experts dedicate some spare time to helping you, so set your expectations at that level.</p>
<p>You'll potentially gain a lot of useful advice but try to have more than a single mentor. One mentor will be biased on their experience (see above everything I've said about my&nbsp;<em>very specific story</em>) so having a couple can help alleviate some of that. Equally, because most mentoring is free and delivered in a mentor's spare hours, be conscious of wasting a mentor's time by not showing up or by being unprepared.</p>
<p>A mentor will be able to give you some generic guidance or offer feedback on work you're producing such as a portfolio review or CV assessment, but I'd urge you to utilise them more as a sort of a shoulder to lean on.</p>
<p>Talk to them about your frustrations, your challenges, your successes, your questions. Get their advice and soak it up. Keep notes, always keep notes. And follow up from previous sessions to keep a thread going.</p>
<p>Importantly, remember that they're to help you but it's you who wants their help. You need to drive the conversations and come ready with questions and requirements otherwise you won't utilise your sessions well.</p>
<p>I'd recommend structuring your sessions like this:</p>
<ul>
<li>Pleasantries ("hello, how are you?" etc)</li>
<li>What happened this/last week?</li>
<li>What's the biggest thing on your mind right now?</li>
<li>What's frustrated you the most this past week?</li>
<li>Next steps</li>
</ul>
<p>I know it feels really formal, but structure helps with consistency and progress. You don't want to waste yours or their time.</p>
<blockquote>
  <p>Pithy takeaway: Looking for support outside of your workplace is key. Internal colleagues will often see you for who you are in the workplace (i.e. your current role/title), external mentors will be free of most bias and focus on helping you get to your next step.</p>
</blockquote>
<h3 id="4startfreethenmaybespendmoney">4. Start free, then maybe spend money</h3>
<p>This is an easy one. There's a tonne of Bootcamp courses out there that charge extortionate amounts of money. I won't name and shame, but the sums are ridiculous, especially because I've spoken with many mentees that didn't even get roles or any further success after spending $9k on a course from a well known provider.</p>
<p>Lots of people are out there to make side income, and lots of people will charge for the services they offer. That's okay, but be wary. There is so much free content available that can get you to where you want to be, especially in design or development, so always start there first.</p>
<p>Free resources may not always have a certificate, but that's okay, having a certificate isn't everything. The reality is that showing the work you've made is what's most valuable, not having a certificate with a Bootcamp's name on it.</p>
<p>As a hiring manager, I don't really mind what your background is if the work speaks for itself. I'm biased here because I had a non-traditional background, but, I think most hiring managers would be the same.</p>
<blockquote>
  <p>Pithy takeaway: There's a wealth of free resources out there for any career, particularly design and development. Take advantage of all of that great thinking and sharing, and build your knowledge from there first. Then, maybe, hit a bootcamp if you absolutely feel you want or have to.</p>
</blockquote>
<h3 id="5createexampleworkfromyourownbriefs">5. Create example work from your own briefs</h3>
<p>Something that's always been difficult for me to swallow is portfolios where someone is new to the industry (either junior or switching careers) and it's filled with redesigns of Spotify or Gmail etc.</p>
<p>These projects can be really interesting from a thinking and execution perspective. I can get a clear idea of how you think about a problem you see and how you execute on that. But, your solution has to ignore all of the internal constraints those teams face. So whilst it may look amazing, there are likely many reasons they've not shipped something similar.</p>
<p>Queue the incoming stream of unsolicited redesigns based on&nbsp;<a href="https://twitter.com/desandro/status/1562435848389332993">this.</a></p>
<p>What I'd prefer to see is a set of self-initiated briefs. What if you could design/build an app or website from scratch to solve a specific problem you face? How would you tackle that?</p>
<p>There's also great brief generating platforms out there that you can use as thought starters. I'd always prefer a personal problem personally, from both my own perspective and as a hiring manager, because you'll be more personally bought in to the idea. But briefs will feel more like working at an organisation and allow you to test working in an area you might not be as passionate about.</p>
<p>Check out&nbsp;<a href="https://goodbrief.io/">Good Brief</a>&nbsp;as a great starter. You can use this for development too but focus more on the logic and tech stack than on the actual design itself (use&nbsp;<a href="https://tailwindui.com/">TailwindUI</a>&nbsp;or other similar things to simplify the UI part for you).</p>
<blockquote>
  <p>Pithy takeaway: There's a tonne of free brief generating sites out there, or you can think about a problem you face and create a solution for it. I'd always urge you to avoid popular product redesigns because there's often a tonne of constraints you're unaware of so it doesn't feel realistic to a recruiting manager.</p>
</blockquote>
<p>Hopefully some of those insights and tips help you on your switch if you planning to make one.</p>
<p>Remember, most importantly, that all of your experience is relevant and valuable. It doesn't matter where you've switched from and what you're switching to, there will always be valuable skills you can pull over.</p>
<p>When you go to interview, consider these things and really highlight them during the process. If you do what I did, you can emphasise that as an Account Manager you learnt the value and importance of stakeholder management and relationship building. As a designer or developer this is an extremely valuable skill you might otherwise not learn until you hit a more senior level.</p>
<p>So try not to see your past as a crutch but instead as a jet pack for your burgeoning new career.</p>
<p>Send me an&nbsp;<a href="mailto:karl@kejk.tech?subject=Switching%20article">email</a>&nbsp;if you're interested to chat more about this, or if you want mentoring support you can find me on&nbsp;<a href="https://adplist.org/mentors/karl-koch">ADPList</a>.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/f4021620-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Strip your URLs to super simple domains]]></title>
            <link>https://kejk.tech/thoughts/strip-your-urls-to-super-simple-domains</link>
            <guid>641b3f9ad0ab1034f24698b0</guid>
            <pubDate>Fri, 24 Mar 2023 19:43:38 GMT</pubDate>
            <description><![CDATA[RegEx has been around since the 50's, and it's still just as unreadable]]></description>
            <content:encoded><![CDATA[<h2 id="thehuntforbetterregex">The hunt for better RegEx</h2>
<p>Since I've been working with frontend code, RegEx (short for Regular Expression) has been a constant and confusing minefield. RegEx has been around since the early 50's, and with it comes a tonne of power but also a tonne of complexity.</p>
<p>The trouble with RegEx is that it's wholly unreadable. So a bunch of different places have cropped up with ways to input expressions and have them&nbsp;<a href="https://regex101.com/">decoded/validated quickly</a>&nbsp;and simply. This makes thing a lot easier if you know what you're doing, but it's still hard to make sense of it by default.</p>
<p>Dan Eden wrote a great post on&nbsp;<a href="https://www.daneden.me/2019/11/23/regex-for-designers-and-writers/">understanding RegEx</a>&nbsp;from a designer/UX writer perspective, which offers a great way to make better sense of the complexity, but it still requires a tonne of work to construct a good pattern that works.</p>
<h3 id="clippingurls">Clipping URLs</h3>
<p>I was working on a personal SwiftUI app project to pull all of my&nbsp;<a href="https://www.kejk.tech/bookmarks">Cosmic bookmarks</a>&nbsp;into a native app so I could browse and enjoy them there, whilst also posting them publicly to my website.</p>
<p>Originally I just had the title and snippet text for each, which was fine (you can see this mirrored on my&nbsp;<a href="https://kejk.tech/">homepage</a>) but I wanted to enhance this for easy scanning and for searching (using iOS' native search bar) by including the source URL.</p>
<p>The problem I had was clipping that URL. A lot of them came with a tonne of junk after the domain, which was mostly unnecessary, and all of them came with a prefix of&nbsp;<code>https://www.</code>&nbsp;or&nbsp;<code>https://</code>&nbsp;which was added noise. What I wanted to find was a RegEx pattern that would allow me to clip out that prefix and suffix info, so I'd be left with a simple&nbsp;<code>kejk.tech</code>&nbsp;or&nbsp;<code>docs.cosmicjs.com</code>&nbsp;for example.</p>
<p>Hunting StackExchange and the web in general gave me loads of expressions but nothing ever quite hit the mark for me. So I decided to try and craft my own expression and provide it below so you can borrow it for your project too.</p>
<p>The great thing about RegEx is that it's platform agnostic. I use the same expression in SwiftUI as I do in JavaScript.</p>
<p>I'm pretty confident that this is more verbose than it needs to be, but, it works every time and cleans things up a treat. So, I present to you, the URL trimmer.</p>
<pre><code class="regex language-regex">const regex = /.*https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/|\/.*$/gm;
</code></pre>
<p>Here we look for any character in the URL string using&nbsp;<code>.</code>&nbsp;and then match that with unlimited searches through the URL string with&nbsp;<code>*</code>. After that, we basically have a bunch of OR matches using pipes:</p>
<p><code>https://www.</code>&nbsp;OR <code>http://www.</code> OR <code>https://</code> OR <code>http://</code></p>
<p>Then at the end we ask it to look for anything that appears after the first solo&nbsp;<code>/</code>&nbsp;by using a&nbsp;<code>.</code>&nbsp;to match any character, then&nbsp;<code>*</code>&nbsp;to perform this an unlimited number of times (again) and then terminate the search of the string with&nbsp;<code>$</code>.</p>
<p>To close it all up, we use&nbsp;<code>g</code>&nbsp;to ensure this is a global search and doesn't stop once it makes its first match (just in case), and then use&nbsp;<code>m</code>&nbsp;to allow for multi-line searching and matching.</p>
<p>And that's it. It's pretty verbose, but it works across all URLs I've encountered and trims them up real nice. Below is how this appears when set up inside a React map. Here we create a new constant to fetch the URL from Cosmic and replace any occurrence of the regular expression with an empty value.</p>
<pre><code class="jsx language-jsx">&lt;div className="mt-4 grid grid-cols-1 gap-8 md:grid-cols-3"&gt;    
   {bookmarks.map((bookmark) =&gt; {        
      const trimmedURL = bookmark.metadata.url.replace(regex, "");        
      return (            
          &lt;a              
            key={bookmark.id}
            href={`${bookmark.metadata.url}`}
            target="_blank"              
            rel="noreferrer"             
          &gt;               
           &lt;BookmarkCard                 
             title={bookmark.title}                 
             subtitle={bookmark.metadata.snippet}
             date={bookmark.metadata.published}                 
             url={trimmedURL}                
           /&gt;             
         &lt;/a&gt;           
       );       
    })} 
&lt;/div&gt;;
</code></pre>
<p>Hopefully for any of you who do frontend work and might need something like this, you'll be able to take advantage. For everyone else, sorry!</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/e97a7800-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How to make friends and influence designers]]></title>
            <link>https://kejk.tech/thoughts/how-to-make-friends-and-influence-designers</link>
            <guid>641b3f9ad0ab1034f24698b1</guid>
            <pubDate>Fri, 24 Mar 2023 09:47:37 GMT</pubDate>
            <description><![CDATA[Why every design crit should be well structured, predictable and facilitated]]></description>
            <content:encoded><![CDATA[<p>In my career, I've been used to being one of one or one of two designers on the team. It was always a pretty lonely experience but also empowering because I was the sole design decision maker, or, I only had to convince one other designer of why we should take a certain direction.</p>
<p>On the flip side, I ended up missing out on a large chunk of design education. I never had the benefit of learning from my peers or gaining lots of great feedback through structured critiques.</p>
<p>Somewhat arrogantly in the beginning, I told myself that I didn't need that. Not that I knew enough about designing but that I could figure it out on my own. That being part of a bigger team would dilute my influence and I'd be worse off in my career.</p>
<p>The truth is, being part of a larger design team that offers a structured critique process is actually one of the best things you can experience. But only if your team defines a process.</p>
<h3 id="neverforgetcontext">Never forget Context</h3>
<p>When I first joined&nbsp;<a href="https://www.moneyboxapp.com/">Moneybox</a>, we were already actively doing design crits on a Friday afternoon. They were a relatively informal affair and we'd show up, say if we wanted to show some work, then jump into an Overflow file or Sketch file and just zoom around the canvas sharing some relatively unfiltered and unstructured thoughts about our design and open it up to the room to comment.</p>
<p>The problem was, there was little to no context. As a growing company, we're split into separate workstreams which we call missions. This allows us to separate our individual strengths and deliver across the different areas of the business. As a design team, we're no different. We split against these missions too and whilst this makes it a lot easier to focus our individual energy on a specific and consistent area of the business (such as Payments or Retirement), it also means our knowledge of the wider design changes is fragmented.</p>
<p>As such, context is really important when we share our work with each other. Without proper context, we lose any hope of offering great feedback. However, it's very possible to over or under contextualise, and finding the balance can be extremely tough.</p>
<h4 id="sohowdoyoucreategoodcontext">So how do you create good context?</h4>
<p>Firstly, utilising slides is a powerful approach. Much like presenting your portfolio to get a job or sharing a monthly update with the wider business, slides offer a set of constraints that ensure you don't share too much at a time. They act as a container for your explanation and ensure that you must only show the highest clarity visual explanation of your solution.</p>
<p>It also offers a way to create a proper sense of storytelling and setting yourself up for success comes from setting up a great story.</p>
<h4 id="usingadesignprocesstobuildyourstory">Using a design process to build your story</h4>
<ol>
<li>Start with&nbsp;<strong>what</strong>&nbsp;you're going to share</li>
<li>Set the&nbsp;<strong>business context</strong>&nbsp;/ business problem</li>
<li>Define your&nbsp;<strong>customer problem statement</strong>&nbsp;(if applicable)</li>
<li>Share any&nbsp;<strong>hypotheses</strong>&nbsp;you have</li>
<li>Show a&nbsp;<strong>couple of experiments</strong>&nbsp;but never more than three</li>
<li>Showcase the solution you're&nbsp;<strong>most convinced</strong>&nbsp;solves these problems</li>
<li>Ask for&nbsp;<strong>specific</strong>&nbsp;feedback on your designs</li>
</ol>
<p>There's plenty of other approaches to storytelling and lots of great articles on what you can do, but this is the approach I always aim to take.</p>
<p>You may ask "what if my work is still really early stage?" Or "I don't have a problem statement". Well, you're in luck, this process still works.</p>
<p>If you're in the early stages, the only difference should be the fidelity of the work. You can also show three experiments and ask for your team's thoughts on which direction to dig deeper into.</p>
<p>If you're more focused on the earlier stages and don't have a problem statement. Front load a bit more heavily on the context and ask for support in getting to a great problem statement. But, remember that a crit session is aimed at providing feedback, not solving problems. So be careful of converting it into a workshop. Always ensure you have a starting point which you're asking for feedback on, rather than asking your team to help craft it.</p>
<h3 id="acritiqueisnotaworkshoporideationsession">A critique is not a workshop or ideation session</h3>
<p>I've seen crits turn into sessions where a designer is essentially trying to solve their problem by getting lots of design heads together. This is important, but it's not the goal of a crit. A crit is intended to receive&nbsp;<strong>feedback&nbsp;</strong>on an approach, idea, solution, not to get the&nbsp;<strong>answers</strong>&nbsp;to your problem.</p>
<p>As a designer, it's your responsibility to bring your ideas to the table and create enough context to get meaningful feedback. Going into a crit expecting your team to solve your problems is like going to a bar and expecting the barman to drink your drink for you.</p>
<p>After a few failed sessions, it became clear to me that slides were necessary. But rather than enforcing that approach on the team we chose to take a "learn by observing" approach.</p>
<p>I went into my next critique armed with a well considered deck that followed the earlier process.</p>
<p>I shared my work, got excellent and actionable feedback, went away and updated my designs and presented them back the following week to high fives all around. The process worked, and worked well. But what I also noticed was that most other designs on the team came to the next session armed with excellent presentations and the process continued.</p>
<h3 id="acritiqueisnotcriticism">A critique is not criticism</h3>
<p>Something I struggled with earlier in my career was receiving feedback. Feedback often felt like a criticism of my work, of me.</p>
<p>It's very common in the earlier stages of your career to feel emotionally attached to your work. To think of the design as a little piece of you. But the truth is, it's just an artefact. A fragment of an idea that you've been the one to extract.</p>
<p>It took me several years to learn to detach "me" from the work. Whether that's my&nbsp;<a href="https://www.verywellmind.com/what-is-the-id-2795275">id</a>&nbsp;complex expecting instant gratification for the work I've put in to everything or just because of the time it took to create, it's been hard.</p>
<p>But detachment is key to getting great results. A critique shouldn't feel like it's harmful or personal. It shouldn't feel like an attack. If it does, there's two things wrong:</p>
<ol>
<li>Your critique isn't structured well for feedback and the context isn't clear enough</li>
<li>You've not been able to disconnect yourself from the work</li>
</ol>
<p>Number 2 is harder to solve, that's something you'll need to take time to work through. But number 1 is the point of this article.</p>
<p>Through a great design process and through structured communication, you can ensure that crits don't fall to criticism. If you feel personally attacked, it is likely unintentional but it's worth discussing with the other designer(s) afterwards to resolve the personal conflict.</p>
<p>The other approach is to be very clear about what you're&nbsp;<strong>not</strong>&nbsp;looking for feedback on. That'll help structure your feedback and help the rest of the team narrow in on what you need.</p>
<p>"I'm looking for feedback on the execution of this new call to action style. What I'm not looking for is feedback on the illustration or customer journey as I'm not able to change this within the project scope".</p>
<p>Being upfront and clear avoids any confusion or misinterpretation. And if someone feeds back on one of those things, politely explain that it wasn't in scope for this session and move the conversation on.</p>
<h3 id="continuingagreatprocess">Continuing a great process</h3>
<p>As we onboard new designers to the team, again, we don't explicitly mention that we should follow this process anymore. It's not that we can't, but we just don't need to. By default our team shares in this way and new designers learn by observing when they join.</p>
<p>One of my team mates built a fantastic presentation library in Figma that we leverage for crafting our crit presentations. These have become so admired that our wider business want them for their use too…</p>
<p>Every week now, I look forward to our crit sessions and see them as a valuable opportunity to offer my recommendations or to ask lots of questions. It's a safe place for designers to push each other out of our comfort zones or challenge and approach without it having to feel critical or unreasonable.</p>
<p>Our crits are completely invaluable to our process and our&nbsp;<a href="https://twitter.com/_kejk/status/1492098919530172425?s=21">success</a>.</p>
<h3 id="squaringthecircle">Squaring the circle</h3>
<p>Ultimately to bring it back to my origins. I thought that joining a bigger team would lead me to have less influence but it goes to show that no matter how small of a change you encourage, it can have a wildly large impact.</p>
<p>Hopefully you've learnt a bit about "how to make friends and influence designers."&nbsp;<a href="mailto:karl@kejk.tech?subject=Crit%20process">Shoot me a message</a>&nbsp;if you've experienced anything similar and let me know if you disagree with anything I've shared.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/dfc8ee90-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Design for handshakes not handovers]]></title>
            <link>https://kejk.tech/thoughts/design-for-handshakes-not-handovers</link>
            <guid>641b3f9ad0ab1034f24698b2</guid>
            <pubDate>Fri, 24 Mar 2023 09:47:07 GMT</pubDate>
            <description><![CDATA[Why it's better to shake hands with your developers, than throw your designs over the fence]]></description>
            <content:encoded><![CDATA[<p>If you've followed me for any length of time, you'll know that I'm really bullish on the notion that practitioners of a craft should be able to understand the core principles of their neighbouring crafts in order to produce the best outcomes.</p>
<p>To put that in more clear terms, a designer should&nbsp;<em>understand</em>&nbsp;how their designs are built for their end platform but they don't necessarily have to be able to implement it themselves. Understanding the core principles and basic architecture of the platform you're creating for gives your team the best chance of great outcomes.</p>
<p>For the sake of this post, I'll focus on my craft as a designer but you can apply this more broadly to any role. We all have adjacent teams and roles that are impacted directly by our work so understanding them at their core is essential.</p>
<p>One of the first things I ever built and shipped was my initial Figma plugin (then called Px››Em and now&nbsp;<a href="https://www.figma.com/community/plugin/837070613195594890">Hand››over</a>). The original intention of that plugin was to make it easy to convert Figma design pixels into ems. I later upgraded this to be rem focused so that you could adjust your baseline pixel value and added more canvas detection features. This then evolved into a Mac, iOS and iPadOS&nbsp;<a href="https://apps.apple.com/us/app/id1518887590">app</a>&nbsp;because I wanted to use it for myself and because I fancied learning SwiftUI.</p>
<p>But now I'm wondering if the name is right…</p>
<p>I've come to realise through my time across multiple startups, moving between design-only and design-engineering hybrid roles that a design is never really handed over. The physical files may be sent via a link or exported and shipped, but the learning and conversation, the heated debates on delivery, the nitpicking over alignment doesn't stop. And as such, the handover never actually happened.</p>
<blockquote>
  <p>Handover implies responsibility is passed on. Handshake implies responsibility is shared.</p>
</blockquote>
<p>In retrospect, the handover only really happens when it reaches the customer and even then, if you're working in the right way, you iterate and learn, and then subsequently evolve the project further. Rinse and repeat. Handover never happened.</p>
<p>Working with designers at different stages in their careers and different levels of engineering knowledge, it becomes evident that for some, handing over offers a relief. A way to move responsibility off of their shoulders and onto someone else's. Or to feel that their job is done and now it's time to move on to the next thing. As such a handover implies responsibility is passed on, a handshake however, implies responsibility is shared.</p>
<p>In fast paced environments, this is certainly often true. But the best teams work like an organism, harmonious in form and consistently sharing resources and forever communicating. In an environment like that, hard handovers can't ever truly happen.</p>
<p>To give another practical example. If an engineer was delivering a feature but hit a stopping point because something was missing from the original designs, should they a) stop work entirely, hand it back to the designer and wait? Or b) raise the issue with the designer, work to reach a conclusion together, and then carry on?</p>
<p>I'm guessing we'd all pick B. Well, that sounds an awful lot more like a handshake to me. An agreement, a shared understanding, teamwork, partnership.</p>
<h3 id="sohowdoyoudesignforhandshakes">So how do you design for Handshakes?</h3>
<p>There's five key points that really lead to great handshakes.</p>
<ol>
<li>Involve your developers early and often</li>
<li>Share ideas</li>
<li>Design together</li>
<li>Keep connected</li>
<li>Develop a bond￼</li>
</ol>
<h3 id="1involveyourdevelopersearlyandoften">1. Involve your developers early and often</h3>
<p>Great teams work together throughout the course of a project. Rather than relying on finite touch points, they focus on passing the baton whilst continuing to run alongside their team mates, ready to take the baton again when their time comes.</p>
<p>The earlier and more often you involve developers in your process, the less likely designs are to be handed over and become undeliverable or need iterating.</p>
<p>When you're ready to handshake, grab your developer and walk through the codable iteration of your work. Pass on the files and keep in constant communication as the project develops.</p>
<h3 id="2shareideas">2. Share ideas</h3>
<p>Be open to sharing developer thoughts and ideas. Design isn't about gatekeeping so welcome a collaborative and open atmosphere, and let your developer challenge you during the entire process. The more you share, the more you understand each other and the more you'll be able to riff off each other to get to the best result.</p>
<p>If you foster a good enough bond here, you may even be able to be less specific in certain design processes as your developer will know how you think (and visa versa) and as such, can make valid assumptions.</p>
<p>Equally, you'll develop a better understanding of how your product actually works, and as such, learn to make better decisions initially before agreeing on final designs.</p>
<h3 id="3designtogether">3. Design together</h3>
<p>This collaborative space should invite co-designing. I challenge you to invite a developer into your file as you work, talk at the same time, design in real time. Getting comfortable with live designing will make a world of difference. You won't get your deepest work done, but you'll ensure the designs are developer friendly from the get go.</p>
<p>Invite questions. Invite challenges. Challenge them back. Think of this as your safe place to thrash ideas out.</p>
<h3 id="4keepconnected">4. Keep connected</h3>
<p>Once your designs are feeling ready to go, don't lose that connection. Whether you have regular stand ups, async chats, or use Loom to share progress, make sure you stay connected.</p>
<p>As the designer it's your responsibility to encourage this and foster it within your developer. If you want to handshake rather than handover, own this part of the process.</p>
<h3 id="5developabond">5. Develop a bond</h3>
<p>In the end, you should evolve a stronger bond with your developer. This will make a big difference in the long term as they'll feel safer with sharing honest feedback, they'll make better default assumptions or decisions and they'll welcome the idea of working with you again.</p>
<p>This bond is one of the most important in a software development business because it ensures that what ships to customers is the best it can possibly be. Providing the idea is the right one, this execution phase is critical to success so if you can nail this process, you can be confident in the outcomes.</p>
<h3 id="findingthenuance">Finding the nuance</h3>
<p>It's all well and good for me to say that handovers aren't right. This is merely my belief based on working with handshakes for most of my design career. Understanding how the development process works develops a deeper empathy for the difficulties these days to do with responsiveness, unpredictable screen sizes, data rates, device themes, accessibility settings and more. There's so much to contend with, and building these great partnerships rather than transactions will leave your product feeling better than it ever did.</p>
<p>Make sure you share your process with your teams too. Be the leader of the handshake within your organisation and upskill other designers, developers and anyone else in the business on this collaborative process.</p>
<p>If you end up trying this handshake approach, let me know how you get on. I'd love to hear about it.</p>
<h3 id="furtherreading">Further reading</h3>
<p><a href="https://material.io/blog/designtocode">Turning Handoffs into High-Fives</a></p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/d6020860-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On creativity as a process for catharsis]]></title>
            <link>https://kejk.tech/thoughts/on-creativity-as-a-process-for-catharsis</link>
            <guid>641b3f9ad0ab1034f24698b3</guid>
            <pubDate>Fri, 24 Mar 2023 09:46:49 GMT</pubDate>
            <description><![CDATA[The more I listen to our third album, the more I recognise the fact that I wrote it as a form of catharsis.]]></description>
            <content:encoded><![CDATA[<blockquote>
  <p>This one is more about processing emotions and dealing with loss. If that triggers you or isn't interesting, feel free to skip it.</p>
</blockquote>
<p>The more I listen to our third album, the more I recognise the fact that I wrote it as a form of catharsis.</p>
<p><a href="https://youtube.com/c/Echoesbanduk">Our music</a>&nbsp;has always been an outlet for me to deal with emotions I think, but this latest album more so than any other.</p>
<p>We started writing it whilst my dad was sick with terminal cancer, but having survived 6 years at the time, I wasn't expecting anything final to happen. I'd been feeling in a pretty positive place and so the songs I was writing, whilst heavy, weren't dealing with anything difficult. It's evident when you hear them, they're more upbeat and rotate around a major chord.</p>
<p>When I listen back to&nbsp;<a href="https://album.link/tqh6ggrq7kcc9">Cornerstone</a>, which we re-recorded for it's 2022 vinyl re-release, I can hear the difference in level of positivity. It's dynamically much more upbeat and musically rotates around much more major themes, both musically and thematically.</p>
<p>Although we write as a unit, and I don't contribute lyrically, the main skeleton songs I write at the start tend to have a dramatic impact on the overall final outcome. Thematically I set the scene, and the rest of the guys come in and chop and change things until we're all happy with the final outcome. But regardless of that process, what I define upfront tends to set the stage for what the final form will be. So, if I'm feeling wildly optimistic then that'll be reflective, if I'm feeling concerned or solemn, that'll come through too. Unlike any other medium I work in, be that design or development, music is my catharsis.</p>
<p>Working with design systems and predefined toolsets, design and development don't really offer that same level of catharsis for me. They're much more clinical and definite. Not entirely void of emotion, but not filled with heart like my music is. This is in part because whilst I'm a designer that loves design, and I'm a frontend developer that loves development, music is my passion project and the thing that gives me emotional release.</p>
<p>We decided to re-release Cornerstone in memory of my father. We knew we were going to re-release before I lost my father, but once that happened it became a great opportunity to take a step back and rethink that album again. When we originally recorded it, it was our first attempt at a self recorded album that could be released rather than just demoed. As a result, whilst we knew a lot about music production from all our demoing over the years, we had lots of gaps in our knowledge and skills. Since releasing Cornerstone we'd learned a lot and gotten much better at async recording and production. This meant we could more confidently deliver the album we wished we had the first time around. So we decided to make the version we wished it had been before. And I'm so glad we did.</p>
<p>When it came to our latest record, as I said earlier, it started in a place of optimism and hope. There was a new drug on the horizon that might extend my dad's life, at least for another year or two based on study data. He was desperate for just one last summer and we were desperate for him to have that, and it seemed like it was possible. He wasn't in the best place but he was coming through it like he always did.</p>
<p>Sadly, that day never came to pass. My father collapsed one morning and never recovered. Watching the strongest person you've known, the person who literally and metaphorically gave you your own strength, revert to a state of confusion and have an inability to speak and respond is immeasurably hard to handle.</p>
<p>After that moment we spent a week or so watching him decline. Going through that process is still hard to process and often when I go to sleep those are the moments I see the most. It gets harder and harder to remember those good times and the positive memories, but music becomes my outlet in those moments.</p>
<p>Although the tracks aren't in the order they were written, it'll be evident when I started writing post-passing. The songs have a darker tonality, tend to be much heavier and generally less musically positive. But this is purely part of that catharsis for me.</p>
<p>I'm not writing to be negative, I'm writing to help me process that negativity, that heartbreak, that anguish. Often popular songs are written about the anguish of breakups and in some ways, these songs are my breakup songs. They're a way for me to breakup with the past and look forwards toward the future.</p>
<p>Things will never be the same, but my father was from the school of Stoicism. He didn't believe in hanging on the past or looking too far in the future, he believed in the power of the Now. Living each day for what it is. And that'll be how I continue to move forwards. Living each day doesn't mean doing something of importance every day, it can mean doing nothing too but doing nothing with absolute intention.</p>
<p>And music will continue to be my outlet, my catharsis, my process of grieving. It provides that creative freedom and feeling that I can't get anywhere else. If you're dealing with anything in life, look for your cathartic outlet. It can be anything, and it's often likely to be something you don't try to force into an outlet but just finds itself like that naturally.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/cd89e950-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Rumination, iteration or procrastination]]></title>
            <link>https://kejk.tech/thoughts/rumination-iteration-or-procrastination</link>
            <guid>641b3f9ad0ab1034f24698b4</guid>
            <pubDate>Fri, 24 Mar 2023 09:46:19 GMT</pubDate>
            <description><![CDATA[Knowing when to let an idea go and when to not even go there.]]></description>
            <content:encoded><![CDATA[<p>I recently saw a&nbsp;<a href="https://twitter.com/_kejk/status/1457825554112172032?s=21">Tweet</a>&nbsp;from&nbsp;<a href="https://twitter.com/kyleturman?s=21">Kyle Turman</a>&nbsp;that prompted me to think about the role of ideation in the design process, and when that becomes procrastination rather than rumination.</p>
<p>Many successful people talk deeply about the idea of ruminating on a thought to evolve it into what it needs to become. Steve Jobs famously enjoyed taking long walks to develop an idea he had the seed of and used that uninterrupted time to ideate in his head.</p>
<p>But, as I stated in my reply, I've seen many designers early in their career ruminate on an idea to the point of procrastination. To be clear, I'm using procrastination to cover two thoughts here; that the designer is either wasting time by pushing an idea around without actually developing it, or that they're deliberately exploring every avenue despite knowing that many of them will be unsuccessful so that they can prove they've tried it.</p>
<p>Let's unpack these a bit. For simplicity I'll shorten these to two simple ideas.</p>
<ol>
<li>Non-iterating procrastination</li>
<li>Over-iterating procrastination</li>
</ol>
<h3 id="noniteratingprocrastination">Non-iterating procrastination</h3>
<p>This is something that affects all designers to some degree but I've tended to notice that it's particularly troublesome early in their career. I struggled with this a lot. I still do some days. Just pushing around rectangles without really making meaningful changes.</p>
<p>It might be that it's unclear what you need to do next. It might be that it's totally clear but seems overwhelming to take the next step, or it might be that you just find the thought simply boring.</p>
<p>This situation is somewhat akin to writer's block. Arguably I think any creative goes through this at some point but when your creativity is boxed into 8-hour time blocks, it's even more likely.</p>
<p>The challenge here is that when you're not making any progress, you'll start iterating on bad ideas. That way, you can demonstrate progress but is it good progress?</p>
<p>Instead, it's important to take a break. Here's a few simple things you can try to get past this all.</p>
<ul>
<li>Take a walk</li>
<li>Ask a colleague to jump in and try some ideas (offer to do a project swap for an hour and iterate each others' ideas)</li>
<li>Throw a few ideas to your team in a group channel and ask for feedback whilst having a ten minute screen break</li>
<li>Switch contexts to a different skill --- if you're comfortable in code then tackle a logic problem, if you're happier with writing, work on a blog post</li>
<li>iA Writer wrote&nbsp;<a href="https://ia.net/topics/end-procrastination">a bunch</a>&nbsp;of helpful tips for this. Some of these mirror the above, but there's some other handy ideas in there too</li>
</ul>
<p>Whilst these small ideas won't solve things immediately, they'll help to get you into a habit of switching off when you're not making progress or teach you to switch contexts to use the other side of your brain, unlocking your creative lock.</p>
<h3 id="overiteratingprocrastination">Over-iterating procrastination</h3>
<p>This second variant is often the killer though. If you're already experiencing a non-iterating procrastination state, it's easy to start falling into a pattern of over-iterating to make up for any shortfall. The issue here---and this seems especially common early in your career---is that you end up iterating on bad ideas to solve the problem.</p>
<p>The challenge here is you then start making poor decisions to feel like you've made any decisions at all. This ends up leading you down bad paths and lots of wasted time.</p>
<p>Another side to this, especially when you're more junior in your career is that you might lack the internal clout to be able to push back on a bad idea suggested by a colleague, manager or leader. In these instances you'll feel like you&nbsp;<em>have</em>to explore them because you don't have the ability to push back.</p>
<p>This isn't necessarily procrastination in the usual sense, mostly because it's not self inflicted, but it can end up going that way or have the same effect on your progress.</p>
<p>This is challenging because you can't simply earn internal clout overnight, but having the ability to push back when you know an idea is wrong is key. With seniority and clout comes the ability to push back with little or no justification. That's a privileged position to be in and doesn't come easily, or to, everyone.</p>
<p>If this is the situation your in then I have some suggestions for what to do.</p>
<ul>
<li>Gather a single example of your idea done badly with some simple redlines to point out the issue. Present this when challenged.</li>
<li>Explore one bad idea and present it alongside two better ideas. Don't show more than three ideas as it'll provide too much choice. Get your colleagues to vote on them and use this as extra justification.</li>
<li>Confer with a senior colleague ahead of the meeting and explain you want to push back. Ask them to back you up when you do.</li>
</ul>
<p>But what happens if you don't realise your over-iterating a bad idea? Or how do you even tell if you are?</p>
<p>There's a few tell tale signs of when a design has gone awry.</p>
<ol>
<li>You can't justify the reason for your decision to yourself</li>
<li>You can't convince yourself you'd use it</li>
<li>You can't see the potential future/long term vision for the idea</li>
<li>You can't confidently tell what question you're answering or what problem this solution solves</li>
</ol>
<p>In these situations, again, lean on your team to provide that nudge if you can. If you're a team of one, show someone outside of the project (i.e. a friend or loved one) and see how they'd feel. Without context they can often give the most brutal, honest and helpful feedback.</p>
<p>I've seen people get caught in a context loop many times, I myself have been in that situation, where you justify bad ideas because as part of the wider context you can convince yourself that they make sense.</p>
<p>Try talking to a friend or family member about this work and explain with the context. If it takes too long or is incoherent or messy, take a step back and ask yourself whether this has gotten too complex.</p>
<p>And to really simplify the problem and avoid bad iteration, step away from your designs entirely and revert to pen and paper. Don't use it to sketch designs though, use it to scratch down thoughts and concepts. Think of it like a way to journal your thoughts around the idea you're solving for and let the thoughts flow. It may take a few goes to get into this mindset but it can really help unpack the idea and take you away from designing a bad idea whilst keeping you inside the same headspace. It might not feel like progress but it actually likely will get you further in the end.</p>
<p>As you grow in your career you'll find that your hunches or initial concepts tend to be the ones that stick (most of the time) and you just iterate on that to get to a final solution. That isn't always the case, but you'll learn quickly when something has value or not and whether to push it further or let it go. Earlier in your career though you'll probably find that you get attached to an idea that might not be the right one and find it hard to let go. Hopefully some of the advice above helps you to avoid that trap and the possible procrastination loops that ensue.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/c4145770-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Polywork: LinkedIn without the Suits]]></title>
            <link>https://kejk.tech/thoughts/polywork-linkedin-without-the-suits</link>
            <guid>641b3f9bd0ab1034f24698b5</guid>
            <pubDate>Fri, 24 Mar 2023 09:37:23 GMT</pubDate>
            <description><![CDATA[The future of networking is being built in the open.]]></description>
            <content:encoded><![CDATA[<blockquote>
  <p>Disclaimer: This article is sponsored by Polywork but all opinions are my own and not suggested, influenced or edited by anyone at Polywork.</p>
</blockquote>
<h3 id="whatispolywork">What is Polywork</h3>
<p>There's a concept of polyamory in life, where people engage in consensual multi-person relationships. It's not for everyone, but the idea that we don't have to be tied to one person is an interesting concept to think about. Now, if you take that concept and apply it to your work and personal life then you start to see where Polywork is coming from.</p>
<p>In our professional lives, we often identify as a specific career or job role: the Product Designer (like me), the Frontend Developer, the Milkman, or the Beautician. The reality though, is we're often a lot more than that, and even very often in our professional careers, we perform more roles than that title we hold.</p>
<p>If you've read my articles for a while, you'll know that I sit in the land of "Product Designer who codes but also writes music". At different points in my career I've been able to take advantage of all these facets but never once could I call myself that as a job title. It'd be weird.</p>
<p>What Polywork encourages is the idea that we can have many skills and do many things, and that we should celebrate that. Whether that be our achievements or our failures. There's plenty of badges for things such as "College Dropout" or "Failed at a job interview". Normalising this is critical to Polyworks differentiation and to its success.</p>
<p>But most important to Polywork's future success is their approach to how they build the platform. And this is where I want to focus.</p>
<h3 id="whyaretheybuildingintheopen">Why are they building in the open?</h3>
<p>It's become increasingly common for modern startups to build out in the open, willing to ship half-finished ideas and broken flows to gauge customer interest and determine what features to prioritise.</p>
<p>Most famously coined by Facebook's early "Move fast and break things" methodology, young startups taking this approach are finding their strength in being vulnerable.</p>
<p>From when I joined near the beginning (which, in retrospect, wasn't long ago at all so that goes to show how fast they're iterating), the platform simply offered a timeline you could fill out. That timeline hasn't changed much since those days, it's had steady updates but because the team focused on this as the true MVP of the idea, they remained laser-focused on their initial mission of making it easy for people to showcase all that they do without it being confined to a particular job. It was at this point that I set up the custom domain option so I could set up my&nbsp;<a href="https://changelog.kejk.tech/">changelog</a>&nbsp;(more about this later).</p>
<p>Since then, we saw the first glimpse of what would become the Multiverse, allowing you to see other people's profiles on the platform and now the Space Station for finding people to collaborate with, and basic messaging. In a matter of months, the platform has evolved from a timeline to a pretty full-featured product. And it's safe to say, so much of that has been down to building out in the open. Learning by shipping. Testing, iterating, improving and scrapping.&nbsp;<em>Being okay with being vulnerable</em>.</p>
<h3 id="mypersonalchangelog">My personal changelog</h3>
<p>I've focused on treating my Polywork profile as a personal, and professional changelog. Whilst my personal website is kept minimal, focused on very specific finished deliverables, there's a host of things I do that live in and around those things and the last thing I want is for my personal site to become littered with it.</p>
<p>That's where treating my Polywork as a changelog of achievements fits in perfectly. It allows me to personally track my successes and failures, but it also allows others to see those things in chronological order. What's not to love!</p>
<p>It can be pretty daunting to go back through your experience and fill in all those key moments but I found that in some ways, it became cathartic. It acted as a reminder of all the things I've achieved over the years and how I've got to be where I am today. It's humbling.</p>
<p>Depending on who you are, what you do, and where you are in your journey, Polywork will do different things for you. Start by adding some basic content like your job history to see the timeline fill out and then begin to add the nuances at whatever level of detail you want. Polywork is flexible enough that you can decide how granular you want your profile timeline to be. Make it an extension of who you are.</p>
<h3 id="whatyoucanlearnfrompolyworksshippingstrategy">What you can learn from Polywork's shipping strategy?</h3>
<p>There are a few key things I think any business can take away from Polywork's approach to shipping their MVP across the web and mobile.</p>
<ol>
<li><strong>Don't be afraid to ship a true MVP that offers one feature at the beginning ---</strong>&nbsp;Whilst you're validating your idea and your roadmap, don't get bogged down in waiting to ship all of your features to customers from day one. You can never be 100% certain it will stick. Find your initial niche and ship that first. Then build on top of it.</li>
<li><strong>Start with a single platform and build from there ---</strong>&nbsp;Don't try to release a website, iOS app, Android app, and the kitchen sink too. Focus on a single platform first, validate the idea, then build out other platforms from there. Keeping focused reduces the resource you need upfront and allows you to focus on validation, not implementation.</li>
<li><strong>If you start with the web, wrap it into a mobile app before going native ---</strong>&nbsp;Learning from Polywork's approach here, the initial iOS beta was a wrapped web-app rather than native iOS and kept implementation simple. It was literally a webview (a PWA essentially) but wrapped to be servable via TestFlight. Since then, the app has evolved into being, even more native feeling (although still a wrapped webview) and provides a much nicer experience. This is the way to ship MVP. Bare minimum and then evolve.</li>
<li><strong>Free marketing is the best marketing ---</strong>&nbsp;Being a startup, or even being a larger company, you need to be lean in how you think about shipping things. Whether you're lean with your resource, with your features, or with your marketing strategy; keeping things simple and minimal will get you further for less. You could spend a lot of money on marketing to make a splash, or, you could follow Polywork's approach and generate hype through word of mouth, exclusivity and ambiguity. Whilst they've built a lot of things out in the open, the early days were driven by ambiguity. This ambiguity generated intrigue and as people got brought into the fold, the excitement was shared and drove more waitlist signups. Pair that with exclusive personal codes to skip the queue and you've got a winning marketing strategy. Polywork weren't the first to do this, but as a business, they've executed it perfectly. My Twitter timeline is a constant thread of "I've just joined Polywork, it's amazing, use my code to sign up now". As a company, what more could you ask for?</li>
</ol>
<h3 id="signyourselfup">Sign yourself up</h3>
<p>If you want to get on Polywork yourself (and I highly recommend you do!) then you can use my&nbsp;<a href="https://www.polywork.com/invite/kejk">personal link</a>&nbsp;to sign up, the first 25 people will skip the queue. Make sure you come and&nbsp;<a href="https://www.polywork.com/kejk">follow me</a>&nbsp;once you get on there and say hi!</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/bb110f60-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Tempo: Designing a product that demands to not be used]]></title>
            <link>https://kejk.tech/thoughts/tempo-designing-a-product-that-demands-to-not-be-used</link>
            <guid>641b3f9bd0ab1034f24698b6</guid>
            <pubDate>Fri, 24 Mar 2023 09:36:17 GMT</pubDate>
            <description><![CDATA[Tempo is a minimalist email client, making email simple again]]></description>
            <content:encoded><![CDATA[<blockquote>
  <p>Disclaimer: This article is sponsored by Tempo, but all opinions are my own and not suggested, influenced or edited by anyone at Tempo.</p>
</blockquote>
<p>I've been using Tempo for a while as a way to manage my daily email workflow. I don't actually remember where I first heard about it, but as someone who values the principles of minimalism and essentialism, it suits me down to a tee.</p>
<p>Tempo is a minimalist email client, aimed at reducing the amount you pick it up and avoiding the constant barrage of email noise and distraction of modern personal and business life.</p>
<p>Email clients really are a dime a dozen, it's an area of app stores that is ripe with implementation but mostly misses on true differentiation. Whilst it's very easy to find another email client to test out instead of the default one installed on your device, it's very hard to find one that actually offers something different. Tempo, however, is&nbsp;<em>this</em>&nbsp;email client.</p>
<p>As someone in the product design world, I've often been tasked with designing strategies and affordances that encourage product usage. Pulling people in via notifications, including "tasks" for customers to do in order to get them using the app when they might not need to, working with marketing to develop campaigns to encourage upsells. These things are important for business often, but they're at odds with what we as people actually want most of the time.</p>
<p>Tempo, unlike most products, demands to be put down. From its ultra-minimal aesthetic to its approach to email batching, it doesn't want you to open it up and pull to refresh every five minutes.</p>
<p>There's a couple of things about Tempo that I think are super important to its current and future success and some key things I think any brand can learn from them.</p>
<h3 id="1batching">1. Batching</h3>
<p>Tempo's first unique feature is its approach to informing you about email. Rather than sending you a single notification for every email, you receive, instead, when you set up Tempo (or wish to add additional Batching slots) you define time windows that you want to receive the emails and Tempo holds onto them until that time.</p>
<p><img src="https://cdn.cosmicjs.com/750c7ad0-fda7-11eb-aaf9-c7d10ae67fc2-IMG0989.PNG" alt="" /></p>
<p>If you ever need to see them before then---such as awaiting that important client brief or the outcome of your potential promotion---you can either peek at them or force a new batch to be delivered. If you don't do this, you'll just receive a single notification to declare that a new batch is ready which will then allow you to see what's waiting for your attention.</p>
<p>This focus on batching helps you to focus on what you do best, designing or developing.</p>
<blockquote>
  <p>Key takeaway: Spend time thinking about the most important thing you can do for your customer and make that your hallmark feature. Even if it feels at odds with the industry, do it anyway. You can allow overrides where necessary, but don't make them easy.</p>
</blockquote>
<h3 id="2notbeingdemandingofcustomertime">2. Not being demanding of customer time</h3>
<p>Speaking of time, Tempo cares about your time. We all know that async communications often take up lots of our working and personal time. With email, we had our first experience of this, and over time with the introduction of text messages everywhere, Slack, Teams, and more, we have limitless things wanting our limited attention.</p>
<p>Tempo's batching focus allows you to get on with the things that matter most in your day and only care about email when the time comes.</p>
<p>The mobile beta takes this seriously too, limiting the functionality so you're focused on either dealing with the batched email by sorting and replying or pushing emails into 'To Do' for later.</p>
<p><img src="https://cdn.cosmicjs.com/a68d0e80-fda7-11eb-aaf9-c7d10ae67fc2-IMG0985.PNG" alt="" /></p>
<p>This limited functionality is by design. This speaks to Tempo's mission of making email less distracting and their desire to build with love and design with purpose.</p>
<blockquote>
  <p>Key takeaway: Think about how much time your customer has and optimise your product to minimise how much of it you ask for. Think about whether you&nbsp;<strong><em>really</em></strong>&nbsp;need to send that push notification.</p>
</blockquote>
<h3 id="3thinkingpeoplefirst">3. Thinking people-first</h3>
<p>There's a lot of tools designed to "make you more productive" but often they don't actually succeed because instead of removing the noise and simplifying things, they bloat out their offering and encourage you to spend more of your time on their product. That demand for your time is against what Tempo believes in and is in fact a direct opposite of what Tempo expects.</p>
<p>You can look to their domain to think about how they feel about you as a customer.&nbsp;<a href="https://www.yourtempo.co/">www.yourtempo.co</a>&nbsp;is very explicit that it's about being "yours". This subtleness to the domain is a surprisingly important and significant one. It shows how Tempo feels about you as a customer or prospective customer. They want you to feel as though the product is yours and not the other way around. Tempo works for&nbsp;<strong>you</strong>.</p>
<blockquote>
  <p>Key takeaway: Be people-first. It's easy to create a product that achieves your goals but trying to do that whilst also understanding about and caring for your customer is hard. Put yourself in their shoes, would you want what your about to do to happen to you?</p>
</blockquote>
<h3 id="4beautifulbututilitariandesignfunctionoverform">4. Beautiful but utilitarian design (function over form)</h3>
<p>By design, Tempo is intentionally minimal. The interface and affordances are kept stripped and colourless. There's a few minor moments of colour when it feels useful to explain visually what is happening, such as the green toggles to enable or disable accounts or batching per account, or swipe actions or the tiny blue indicator to show an item is new. These moments are kept for items that afford action. This helps it to be really clear on what elements are interactive versus passive.</p>
<p>The default 'compose' window for new emails or replies utilises markdown by default so you can quickly and easily format emails without having to mess around with rich text buttons or cluttered editing experiences.</p>
<p>|   |   |
|---|---|
|  <img src="https://cdn.cosmicjs.com/fb960210-fda7-11eb-aaf9-c7d10ae67fc2-IMG1020.PNG" alt="" /> | <img src="https://cdn.cosmicjs.com/de325b60-fda7-11eb-aaf9-c7d10ae67fc2-IMG1021.PNG" alt="" />   |  <img src="https://cdn.cosmicjs.com/1bd24430-fda8-11eb-aaf9-c7d10ae67fc2-IMG0987.PNG" alt="" /> | <img src="https://cdn.cosmicjs.com/23b3a180-fda8-11eb-aaf9-c7d10ae67fc2-IMG0988.png" alt="" />  |</p>
<p>Other email apps tend to bloat the editing interface with lots of action bars and abilities to format everything under the sun. Whilst this could be useful, it can lead to spending too much time creating the email and less time focusing on what matters most as a designer or developer.</p>
<blockquote>
  <p>Key takeaway: Your interfaces can be simple, it's okay to not fill them with coloured buttons, illustrations, animations or other decorations. Sometimes the simplicity is what brings the true beauty because it allows your product's functions to be key. As Dieter Rams put it, "Good design is as little design as possible"</p>
</blockquote>
<h3 id="5buildingwithintentionality">5. Building with intentionality</h3>
<p>Finally, Tempo's compose view on desktop includes a type length indicator that recommends keeping your message to the length of a tweet. Whilst this isn't always useful or correct for your use case, it helps to remind you to be intentional with your messages.</p>
<p>Whether you're replying or writing a brand new message, this indicator is present. It's another moment that introducers colour when you go over that intentional length. The more you use it, the more you'll get comfortable with shortening your emails and think of them more like text messages when the time is right.</p>
<p>Really though, intentionality sums up the entire product and the ethos of the company. And this is demonstrated end to end within Tempo.</p>
<blockquote>
  <p>Key takeaway: Intentionality is key. Be intentional with every decision you make from design of the interface, to the stack you're building with, to the customer journeys you focus on and the way you solve your customers' problems. All of this needs to be intentional from the outset. Your product and your customers will benefit in the long run.</p>
</blockquote>
<p>I couldn't recommend it enough, and if you want to give it try, you can sign up via&nbsp;<a href="https://www.yourtempo.co/ref?code=JG31WQ">my link</a>&nbsp;to get a 30-day free trial. After that, it's €10 a month, and it's totally worth it. The time saved alone makes you more than €10 a month more productive with your time. And, if you're like me, you'll feel nothing but more relaxed, and more productive.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/aea8ca60-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Why every designer should experience customer service]]></title>
            <link>https://kejk.tech/thoughts/why-every-designer-should-experience-customer-service</link>
            <guid>641b3f9bd0ab1034f24698b7</guid>
            <pubDate>Fri, 24 Mar 2023 09:30:22 GMT</pubDate>
            <description><![CDATA[It's common when joining a new company to get thrown straight in at the deep end. Sometimes, it’s better not to. ]]></description>
            <content:encoded><![CDATA[<p>It's common when joining a new company to get thrown straight in at the deep end. Whilst not always true, often the reason for your employment is because the team is currently understaffed and need additional bodies to help get things done or that there's a big new feature/product area that needs work and another colleague is needed to deliver that.</p>
<p>When this is the case, it's easy to overlook the value of ensuring that new employees experience a bit of frontline action. And in the case of my new role as a Product Designer at&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/%22https%3A//www.moneyboxapp.com%22">Moneybox</a>, the experience I've had so far is as a frontline customer service (CS) agent. My first two weeks are being spent alongside the wider CS team, learning about our customers' pain points first-hand, as well as those moments of delight---such as someone being able to buy their first home thanks to our LISA---and providing them with world class customer service.</p>
<p>This is the first time as a designer that I've not been designing something from day one, and honestly, it's the best feeling. Whilst I'm itching to get started on my first design project, easing into a company who's product I've used as a customer for the past 4 years by experiencing the CS role has been one of the most enjoyable onboarding experiences I've had.</p>
<p>So far, I've seen a trend;&nbsp;<em>things that come up via CS enquiries turn into new product features. Period</em>. Obviously this can't be true for everything we hear, including many customer feature requests, but for anything that is a clear customer issue that appears regularly, this is 100% the case. And this tells me something important; at Moneybox we care about our customer experience and it is embodied throughout the business.</p>
<p>The common requests that come up often (I can't talk specifics right now due to them being unreleased features) aren't things that we can't resolve already. Two of our new features are really straightforward to handle from our CS admin. But the truth of the matter is, a customer should&nbsp;<em>just be able to do it themselves</em>. So that's what we're doing. We're shipping features to make that true. And that embodies for me a culture of customer care and one of shipping necessary features often. It shows a connectedness across the business, from CS to Ops, Design to Development, Insight to Marketing. All of these departments are interconnected, and, woven throughout all of this is a desire to do the best for our customers. That's a place I want to be. Period.</p>
<h3 id="keytakeaways">Key takeaways</h3>
<ol>
<li><strong>Customers do often know exactly what they want, but they won't always express it.</strong>&nbsp;Look for common pain points amongst the vast base of customers you or your colleagues speak to. Dig into the underlying need, don't take what they say at face value as a feature request.</li>
<li><strong>Customer Service is hard.</strong>&nbsp;Even with pre-written responses to the most common questions, it's a repetitive and demanding task to say the same things over and over with a positive attitude. It's also relentless. Take a moment to be grateful for your CS team and maybe have a coffee chat with one of them next week. Thank them for their efforts.</li>
<li><strong>Not doing your day job from day one is a really great way to start a new role.</strong>&nbsp;For all you managers out there, not trying to get a new employee to hit the ground running from day one is actually a really good thing. It'll help you to get the most out of them when they do actually start their role officially, and it'll help them to appreciate more of the wider business. Whilst intros to different departments are useful, they're a far cry from actually having to do the job for a bit.</li>
<li><strong>Secondments can be really valuable.</strong>&nbsp;Ask your employer for secondments into other areas of the business, even if just for a day, if you feel it'll enhance your role to do so. As a designer, spending time with CS, marketing/insights or development could have a significant positive impact on your day-to-day and allow you to see opportunities to improve your processes or push for a specific feature to be promoted in importance.</li>
<li><strong>Build a culture of connectedness.</strong>&nbsp;By encouraging departmental secondments, you ensure that you build a wider respect for different departments and connect your teams through action. A sales colleague may gain great value from spending time with marketing to understand how the product is sold direct to the consumer; a marketing colleague may find value in joining data science for a short time to gather insight about how they think about data; a data scientist may benefit from spending time with insight to see the true impact of the latest feature shipped. Not all secondments are created equal, but there's so much value that can be gained from time spent in another department.</li>
</ol>
<p>I'm sure I'll have plenty more to say, but for now, these are my immediate raw thoughts on the process of being a CS for my first week. Ultimately, a secondment like this is nothing but a positive experience so if it's possible to do this in your company for new hires, make sure you do!</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/a2c23880-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[What I've learnt over the past year]]></title>
            <link>https://kejk.tech/thoughts/what-ive-learnt-over-the-past-year</link>
            <guid>641b3f9bd0ab1034f24698b8</guid>
            <pubDate>Fri, 24 Mar 2023 09:29:50 GMT</pubDate>
            <description><![CDATA[Lessons I’ve learnt over the past year.]]></description>
            <content:encoded><![CDATA[<h3 id="20202021">2020 — 2021</h3>
<p>I didn't want to write a verbose blog post about the past year but the more I got to thinking, the more I felt it necessary to document (mostly for myself) the key lessons I've learned from this past year. These lessons are not necessarily about Covid, they're about other factors that have impacted on my life too such as losing my father and from what my latest startup adventure has taught me.</p>
<p>Below are my observations, maybe you'll be able to learn something from these too.</p>
<h3 id="1thatdeeplyunderstandingwhatyouredesigningforbylearningtobuildyourideaisincrediblyvaluable">1. That deeply understanding what you're designing for—by learning to build your idea—is incredibly valuable</h3>
<p>This might feel obvious with a cursory glance, but it's true. Lots of people say it, and lots of people have varying opinions on what 'learning to build your idea' truly is. In my mind, it's whatever it takes to realise your vision enough to make sense of it as a true end product, even if that's incredibly MVP.</p>
<p>I took this approach by building out Figma plugins to scratch an itch around weird interface quirks or missing features. I could have not bothered, or I could have asked someone else to build it, or even find the nearest alternative. But the reality is, I spent the time to learn to create them myself, in turn, I better understood how Figma works under the hood, and finally learned lots of valuable TypeScript along the way.</p>
<p>It taught me a lot about shipping products to customers, whether it's free or not, it matters. And it taught me a lot about taking on feedback and improving ideas, but without just doing&nbsp;<strong>everything</strong>&nbsp;someone asks for.</p>
<blockquote>
  <p>Pithy takeaway: Learn to build things, no matter how small.</p>
</blockquote>
<h3 id="2thevalueofbuildingandhavingarobustdesignsystemisnottobeignored">2. The value of building and having a robust design system is not to be ignored</h3>
<p>Design systems are complicated, they're time consuming to build well and there's still an enormous gap between the designed design system (in Figma, Sketch or another tool of choice) versus the coded component library (the name difference alone is irritating!).</p>
<p>However, taking the time to build out a robust system makes the world of difference in the long run. If you take the time to create flexible components, and think about their relationship to each other and their scalability, you'll start to reap the rewards pretty fast. If you can keep lesson 1 in mind too and actually try to create any of these in Vue, React, Swift or similar, then you'll also find limitations that allow you to rethink how you designed it in the first place. So you can go back and improve on its flexibility and scalability.</p>
<p>Robust systems also ensure consistency of your brand application across interfaces and other media. I saw a lot of worry previously about design systems being so good that a developer can build content without a design. Great! That should be the goal. If they can build views without Design mocking them up, Design can focus on defining the intention of the work, it's reason for being, the customer value, the stakeholder needs etc. Designing the intention, not designing the mock.</p>
<blockquote>
  <p>Pithy takeaway: Design systems create room for more intentional work.</p>
</blockquote>
<h3 id="3theimportanceofbuildingstrongdesigndevrelationships">3. The importance of building strong design&lt;&gt;dev relationships</h3>
<p>Learning how components are built, giving it a go yourself, that's all useful in ensuring a positive handover experience with Development/Engineering. But if they're not onboard with the design strategy and don't buy in to the use case of components then you're never going to build the best bond for the best end product.</p>
<p>Designers and Developers should be like Ham and Cheese, no matter what they go together. You should be in each other's pockets in a positive way, defining and scoping solutions from the outset, together. If you show willing by trying to prototype a component in real code or just showing that you've considered limitations though good documentation, it'll go a long way. A great engineer will take the time to explain other limitations you may have missed and together you'll build something truly scalable and great.</p>
<blockquote>
  <p>Pithy takeaway: Start building that relationship as early as you can. It makes the world of difference.</p>
</blockquote>
<h3 id="4thatbusinessneedsandproductneedsareoftenatoddswitheachotherbutthatsokayitsallaboutcompromise">4. That business needs and product needs are often at odds with each other but that's okay, it's all about compromise</h3>
<p>Businesses have needs that can often vary from what the product really requires, for example, when fundraising a business will be focused on optics and future product vision, whereas during a period after fundraising, they'll likely focus more on growth.</p>
<p>It's common for these business needs to clash with product needs. Often VCs will turn down businesses by not ever saying no, and instead, by offering product feedback so they keep an open door in case you suddenly do find the traction they desire. When they do this, it's easy for stakeholders outside of the Product team to prioritise these seemingly "important" features. The reality is, these features are merely an easy out for the investor and will often lead to feature bloat in your product.</p>
<p>It's a tough line to walk, trying to appease VCs or business stakeholders is important, but it can be super hard to do this without straying from your product roadmap.</p>
<blockquote>
  <p>Pithy takeaway: Compromise is key, but don't let business requirements derail your product roadmap.</p>
</blockquote>
<h3 id="5thatstartupsarehardbutastrongteamandatruebondisenoughtogetyouthroughit">5. That startups are hard, but a strong team and a true bond is enough to get you through it</h3>
<p>Never underestimate the power of building strong relationships. Working at startups, or any company for that matter, is incredibly difficult. But in reality, it's just business and businesses have their ups and downs. What gets you through is having strong relationships. Focus on building them and harnessing them to air out your concerns and worries along the way.</p>
<p>Having great friends outside of work is awesome, but they don't know what the day to day feels like. Having great colleagues internally, makes all of the difference. They understand the nuances of the businesses and are often times going through what you are. Don't be afraid to be vulnerable but avoid falling into hearsay and negativity.</p>
<blockquote>
  <p>Pithy takeaway: Great relationships at work will see you through the toughest times.</p>
</blockquote>
<h3 id="6thatproductmanagersareessentialifyougivethemthefreedomtodotheirbestwork">6. That product managers are essential, if you give them the freedom to do their best work!</h3>
<p>A good Product Manager (PM) is like a good red wine; let them breathe for a little while and they'll only get better. I've seen situations where Product Managers are essentially just task managers, writing Jira tickets and little more. This isn't good product management or good use of a Product Manager. They should write Jira tickets for definite, but not just that.</p>
<p>A good PM is given the freedom to do what they need to do at any time. To drive the team forwards and push for the best outcome for both the business and product team too. A good PM also works closely with design at the outset, working through user experience documentation and process; helping to define the pain points and intended happy paths, being part of the user research process, supporting the design documentation process and ensuring that there's a solid brief.</p>
<p>In some ways, in the outset of the design process, it should be hard to know which person is the designer and which is the PM, only when it comes to pursuing wireframes and detailed design processes should that split occur.</p>
<blockquote>
  <p>Pithy takeaway: Product Managers are essential, but give them room to do their job!</p>
</blockquote>
<h3 id="7thatdesigndevelopmentandtheintersectionofthetwoaremylifeblood">7. That design, development and the intersection of the two are my lifeblood</h3>
<p>This is a personal one, but maybe one that is good to share. I've learnt that caring about both design and development, understanding both of those processes and being confident in both are what excites me and keeps me motivated. Knowing that, writing it down and owning it, helps me to stay on course with my passions and guides my life choices accordingly.</p>
<blockquote>
  <p>Pithy takeaway: Find your perfect fit. Lean into it. And never let it go.</p>
</blockquote>
<h3 id="8toneverunderestimatethepoweroftakingchances">8. To never underestimate the power of taking chances</h3>
<p>Like a Monopoly 'Chance' card, taking a chance can be a risk that either has a reward or a negative consequence. Either way, every chance you take is a lesson learnt and in many ways is a chance to grow and evolve. Chances can either validate your decision making and improve your life or invalidate your decision making, change things and cause you to course correct. No matter which it is, you learn a lot by taking them.</p>
<p>Not all chances are created equal though. Gambling is chance (unless you've got some mad skills) and is more often than not, likely to end badly. Changing careers is a chance that can equally either pay off or lead to a need to flip again. But whatever happens, own the chances you take and look at them from a longer-term perspective. You might find that what once felt like the worst thing that could ever happen, actually ended up changing your life for the better.</p>
<blockquote>
  <p>Pithy takeaway: Over the long term, chances are what teach you the most.</p>
</blockquote>
<h3 id="9toliveeverymomentwithintention">9. To live every moment with intention</h3>
<p>Those who are close to me will know that I recently lost my father to his battle with cancer. It's been a very tough couple of months but practicing elements of buddhist and stoic ideologies has helped me to work through it all. Equally, channelling my inner "Dad" has helped a lot too.</p>
<p>My Dad was a true stoic, minimalist and intentional human. He believed in living in the present moment always and through his diagnosis and 6 and a half years of dealing with it, he never once complained or let it hold him back. Instead he made the most of every single moment he had on this planet. He explored parts of the country he'd never seen before, spent time with the people he loved most, focused on restoring a forest nearby to where he lived and gave back to the planet more than he ever had before.</p>
<p>I'm now focused on channelling him as much as I can to live my life with the most intention.</p>
<blockquote>
  <p>Pithy takeaway: Live every moment with intention, but not like it's your last.</p>
</blockquote>
<h3 id="10tobegratefulforallthatihavebutnotbecomplacent">10. To be grateful for all that I have but not be complacent</h3>
<p>We've been through a lot as a planet lately, but it's still very easy to live in a bubble of your own individual life and community (online or offline) without really appreciating what you have.</p>
<p>I'll keep this one short and sweet. But now more than ever, I have nothing but gratitude for my life, my family, my friends, and my career.</p>
<blockquote>
  <p>Pithy takeaway: Love what and who you have in your life.</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/87eba550-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Why you should reply to automated emails]]></title>
            <link>https://kejk.tech/thoughts/why-you-should-reply-to-automated-emails</link>
            <guid>641b3f9bd0ab1034f24698b9</guid>
            <pubDate>Fri, 24 Mar 2023 09:27:33 GMT</pubDate>
            <description><![CDATA[Reply to those automated emails, you never know what might happen.]]></description>
            <content:encoded><![CDATA[<p>Picture this, it's an all too common scenario, you sign up to something to test it out and then forget about it completely. Weeks later you come back to it and having forgotten you signed up to test it, you sign up again via different creds. Now, without realising it, you've got two accounts.</p>
<p>Eventually you realise this and go back to delete one of those accounts. And, within minutes, you get an automated email about cancelling your account which asks for feedback on why.</p>
<p>This is exactly what happened with me and&nbsp;<a href="https://www.cosmicjs.com/">Cosmic</a>. I'd signed up via Google originally, then forgot and signed up via GitHub only to decide that Google was what I'd prefer to stick with (I'd already put a load of data in by the time I realised). Now, as I'd been using Cosmic for a while at this point, I was actually really bullish on it and sharing my feelings on Twitter and here. I'd also written a&nbsp;<a href="https://www.cosmicjs.com/articles/how-to-post-to-a-cosmic-bucket-directly-from-the-drafts-app-d939e480-3bc8-11eb-a739-b574ca5054de">community article</a>&nbsp;about how I set up my publishing workflow via&nbsp;<a href="https://getdrafts.com/">Drafts</a>. I was well along my way to being an advocate, so I felt it necessary to reply to this automated email to explain that I, in-fact, was really into Cosmic and had shared so publicly.</p>
<p>I assumed it'd go into a void of darkness like most replies to automated emails, but no, Tony (Cosmic CEO) replied and engaged me in good conversation about my use of Cosmic. I then got introduced to the Slack channel and built a bit more of a relationship before going back to my normal life.</p>
<p>After a month or so, Tony got back in touch and asked if I would be interested in figuring out a graphic for a&nbsp;<a href="https://www.cosmicjs.com/blog/jamstack-explained-in-5-minutes">blog post</a>&nbsp;being as I'm a designer who uses Cosmic and thus understands how JAMstack works on a technical level. I obliged and, after a little back-and-forth, the visual went live and our professional relationship began.</p>
<p>Tony and I have a mutual love of interfaces void of clutter and noise, and so I couldn't resist mocking up some thoughts on where I felt Cosmic could go. Tony, quite frankly, loved it. So I worked on some more bits including a refresh to the above-the-fold main page design and---cut forward to a few months later---I'm now proud to say that I'm the&nbsp;<a href="https://www.cosmicjs.com/about">Design Lead</a>&nbsp;at Cosmic, defining our design vision with Tony and building out the interfaces you'll be using day-to-day as a Cosmic user (when we ship our updates!).</p>
<p>So, what does this post ultimately tell you? Well, sometimes the simplest actions can lead to the most unexpected and exciting outcomes. I didn't need to feedback on why I "chose to cancel Cosmic" and I certainly didn't need to advocate online for Cosmic as a random customer. But when everything aligns, great things can happen.</p>
<p>Reply to those automated emails, you never know what might happen.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/7c3c2900-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Getting DRY with Figma plugins]]></title>
            <link>https://kejk.tech/thoughts/getting-dry-with-figma-plugins</link>
            <guid>641b3f9cd0ab1034f24698ba</guid>
            <pubDate>Fri, 24 Mar 2023 09:23:55 GMT</pubDate>
            <description><![CDATA[Solving design problems by building Figma plugins. ]]></description>
            <content:encoded><![CDATA[<p>There's a concept called DRY in development. It means Don't Repeat Yourself and is all about code reduction through declaring and reusing shared resources. Say for example that I have a simple conditional statement that checks for all the correct node types in a Figma plugin to determine if it can make adjustments. I could do the following to do it:</p>
<pre><code class="javascript language-javascript">if (node.type === "FRAME") {  
  const frame = figma.createRectangle()  
  frame.width = node.width  
  frame.height = node.height
}

if (node.type === "GROUP") {  
  const frame = figma.createRectangle()  
  frame.width = node.width  
  frame.height = node.height
}

if (node.type === "ELLIPSE") {  
  const frame = figma.createRectangle()  
  frame.width = node.width  
  frame.height = node.height
}
</code></pre>
<p>But what I'm doing there is redeclaring the same information multiple times, what a waste of compute power. So instead I can bundle these into one. It's difficult to use the&nbsp;<code>!==</code> declaration because so many things can need exclusion, so the best way is to use our friend&nbsp;<code>.includes()</code>.</p>
<pre><code class="javascript language-javascript">const nodeTypes = ["FRAME", "GROUP", "ELLIPSE"] 
  if (nodeTypes.includes(node.type)) {     
  const frame = figma.createRectangle()     
  frame.width = node.width     
  frame.height = node.height 
}
</code></pre>
<p>In design we can do a similar thing using atomic components, building up reusable assets as Lego blocks to avoid having to keep creating new assets. However, we can also take it a step further into the productivity side of design using Figma plugins.</p>
<h3 id="figmapluginswhatsthedeal">Figma Plugins, what's the deal?</h3>
<p>Well, you've had a sneak peek at a bit of Figma plugin code above. Figma plugins use Typescript under the hood to allow you to create, modify and elevate your Figma project.</p>
<p>As you probably know, I'm an evangelist for the "Designers should Code" philosophy, at least, I feel Designers should understand some code. And I've taken that further to believe that knowing how to write enough Javascript to build your own Figma plugins is a superpower all Designers should try to harness.</p>
<p>Figma plugins enable Designers to perform at optimum operational capacity without the burden of loads of admin overhead. Now there are tonnes of available plugins in the Figma Community but that doesn't mean you can find one to solve your problem, some issues are just too unique to your use case.</p>
<p>At HomeHero, we're using a bunch of custom Figma plugins that I've written (including the ones I've actually released) to better maintain our files. I'll cover some of these below.</p>
<p>Ultimately, Figma plugins stop us from repeating ourselves with common admin tasks to clean up our files, they allow us to focus on designing the best experience instead of organising our contents.</p>
<h3 id="thegistofhowpluginswork">The 'Gist' of how plugins work</h3>
<p>A couple of these Gists use the Scripter plugin to work as it has its own API to simplify some bits, grab it&nbsp;<a href="https://www.figma.com/community/plugin/757836922707087381/Scripter">here</a>. Of course, you can use the standard Figma API to perform any of this too, it just might be a little more verbose.</p>
<h3 id="homeherotextlint">HomeHero TextLint</h3>
<p>One of the first plugins I wrote for us was aimed at simplifying text linting. We have a bunch of phrases we write in our designs regularly thanks to our industry, and there are many times that we mistype them and this sometimes makes its way to the product (oh dear!). To avoid that, I've written a super simple linter that parses the document and updates all text characters that match my arrays. It's not the cleanest or best code, but it saves us a bunch of time.</p>
<pre><code class="javascript language-javascript">const find = ["Move in", "move in", "Homehero", "wifi", "Wifi", "WiFi"];
const replace = ["Move-in", "move-in", "HomeHero", "Wi-Fi"];

const layers = figma.currentPage.findAll((node) =&gt; node.type === "TEXT");
figma.currentPage.selection = layers;
const { selection } = figma.currentPage;

async function lintTextNodes(): Promise {    
  figma.root.children.flatMap((pageNode) =&gt;        
  pageNode.selection.forEach(async (node) =&gt; {          
  if (layers.length &gt; 0 &amp;&amp; node.type === "TEXT") {              
    await figma.loadFontAsync(node.fontName as FontName);              
    node.characters = node.characters.replaceAll(find[0], replace[0]);              
    node.characters = node.characters.replaceAll(find[1], replace[1]);              
    node.characters = node.characters.replaceAll(find[2], replace[2]);              
    node.characters = node.characters.replaceAll(find[3], replace[3]);              
    node.characters = node.characters.replaceAll(find[4], replace[3]);              
    node.characters = node.characters.replaceAll(find[5], replace[3]);          
   }         
  return Promise.resolve("Done!");       
  })  
 );    

if (layers.length === 0) {          
  return Promise.reject("No layers selected");  
}}  

lintTextNodes();  
figma.notify("All linted");  
figma.closePlugin();
</code></pre>
<h3 id="homeherocropall">HomeHero CropAll</h3>
<p>The second was a quick way to set all images to&nbsp;<code>"FILL"</code>&nbsp;mode and apply a resize constraint on them. It's not full-proof, but it gets all your images to the same basic starting point. We needed to do this because we have a tonne of images we use for our Picks feature and they all need to be set to the same size to reduce bandwidth when served to the app.</p>
<p>When you have over 400 images, you want this!</p>
<pre><code class="javascript language-javascript">const layers = figma.currentPage.findAll(isImage);
figma.currentPage.selection = layers

for (let shape of await find(selection(), n =&gt; isImage(n) &amp;&amp; n)) {
shape.fills = shape.fills.map(p =&gt;  isImage(p) ? {...p, scaleMode: "FILL",} : p)  
shape.resize(375, 375)}
</code></pre>
<h3 id="homeheroslideexport">HomeHero Slide Export</h3>
<p>Finally, we work in Figma to create our investor slide decks and other slides to share our design progress or lunch and learns. It's great but it's annoying when you need to then turn these into an exported set of slides.</p>
<p>Luckily, we can use Figma plugins to apply some simple settings to make this happen and then export those Frames for others to use (you can even use my&nbsp;<a href="https://www.kejk.tech/lazy-pdf">Lazy PDF</a>&nbsp;app to compress it into a lossless PDF afterward).</p>
<pre><code class="javascript language-javascript">const layers = figma.currentPage.findAll(); 
const frames = layers.filter(isFrame);   

async function renameFrames() {     
 let items = frames; if (items.length &gt; 0) {     
 for (const node of items) {       
  if (node.type === "FRAME") {         
    node.name = ((node.name).substr(0,2) != 'Slide/') ? node.name = "Slide" + "/" + node.name : node.name; }       
  }     
 }}         

renameFrames();     

figma.currentPage.selection = layers.filter((n) =&gt; n.name.startsWith("Slide/"));     
const { selection } = figma.currentPage;

function hasValidSelection(nodes) { return !(!nodes || nodes.length === 0); } 
const settings = [ 
{ format: "PNG", suffix: "@1x", constraint: { type: "SCALE", value: 1 } }, 
{ format: "PNG", suffix: "@2x",constraint: { type: "SCALE", value: 2 } }, 
{ format: "PNG", suffix: "@3x", constraint: { type: "SCALE", value: 3 } }, 
{ format: "SVG", suffix: "" },]; 

async function main(nodes): Promise {   
  if (!hasValidSelection(nodes)) return Promise.reject("No valid selection");   

  for (let node of nodes) {     
    node.exportSettings = settings;   
  }     

return Promise.resolve("Done!"); 
} 

main(selection).then((res) =&gt; figma.closePlugin(res));
</code></pre>
<h3 id="publishedplugins">Published plugins</h3>
<p>Beyond these, I've written a bunch of small utility plugins to make designer life easier. You'll see them all on my&nbsp;<a href="https://www.plugins.run/">Plugins.run</a>&nbsp;site, but you can find them all&nbsp;<a href="https://www.figma.com/@_kejk">here</a>&nbsp;also.</p>
<h3 id="intheenditsallaboutsavingtime">In the end, it's all about saving time</h3>
<p>Ultimately, we all want to save time and not do consistent, repetitive tasks each day. Figma plugins, and having the knowledge to write them, can be that solution for you. I can't count how many countless hours I've saved myself by writing the plugins I have and using plugins others have written too.</p>
<p>If you want to get started with Figma plugins, try out my&nbsp;<a href="https://gist.github.com/kemiljk">Gists</a>, or, follow&nbsp;<a href="https://alcohollick.com/writing/figma-plugin-tutorial-1-6">this awesome tutorial</a>from&nbsp;<a href="https://twitter.com/DanHollick">Dan Hollick</a>&nbsp;who shares a lot of my feelings about designers and code.</p>
<p>If you do end up creating anything awesome for your team, please send me a note and share some Gists! I love seeing what people are up to and seeing how I can adapt and utilise what they've done like I hope people do with my shares.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/732eced0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Thinking in design-code]]></title>
            <link>https://kejk.tech/thoughts/thinking-in-design-code</link>
            <guid>641b3f9cd0ab1034f24698bb</guid>
            <pubDate>Fri, 24 Mar 2023 09:18:07 GMT</pubDate>
            <description><![CDATA[My personal approach on how to think about code from a design perspective and how to implement those changes.]]></description>
            <content:encoded><![CDATA[<p>I've said before that I've built this personal site three times so far, and in all three cases it was without any design file in site. Now, as a designer this might seem like a really weird approach to building out something that requires design, but I designed it in code. Hear me out.</p>
<p>If you've read any of my other Thoughts before then you'll be familiar with my concept of&nbsp;<a href="https://www.kejk.tech/thoughts/code-as-design">Code as Design</a>&nbsp;but for this piece I want to take it a little bit further.</p>
<h3 id="thepremise">The premise</h3>
<p>So to understand why I took this approach---and for those who haven't read my previous articles---you'll need to know that I am a designer but I've had a varied background that grew from learning the basics of HTML and CSS in the early 2000's. So really, I actually learnt the principles of web design through the lens of code.</p>
<p>So below I'm going to outline some practical steps of how to relate code and design. This list won't be exhaustive or complete necessarily (although I may come back and add to it) but it should match pretty well.</p>
<p>Some caveats:</p>
<ul>
<li>All references to design tools will be through the use of Figma's terminology. This is for three reasons:<ol>
<li>It's a pretty ubiquitous design tool now, used by many</li>
<li>It's what I use day to day for my job, so I know it very well</li>
<li>Most of Figma's terminology for tools map fairly synonymously with code (particularly the new flex box-inspired auto layout</li></ol></li>
<li>This is how I think of code and design being linked, it doesn't mean that it's the only way to think about it</li>
<li>I'll do my best to explain any concepts in as much detail as I can, but I can't promise it's exact</li>
<li>This entire piece revolves around the principle of a web project build, you can of course map these same ideas to mobile builds in SwiftUI for example, the exact names will vary slightly (a div for example is more likely to be an Stack or even a Struct depending on how you build your projects, and grids are called LazyVGrid/LazyHGrid respectively)</li>
</ul>
<h3 id="projectsfolders">Projects == Folders</h3>
<p>Where better to start than projects. In Figma, a "Project" is a folder that contains a series of files that you work on. You can have one, several or many. In Code, we use folders (just a regular old computer folder) and inside those folders we keep files which contain our code. Like with a Figma project, a folder can contain one, several or many files.</p>
<p>If you work in modern Javascript-based frameworks, you'll likely have a whole bunch of files. If you're just keeping it minimal you may only use a single HTML file.</p>
<h3 id="filesfiles">Files == Files</h3>
<p>Well this ones easier right? Each Figma file inside your project is essentially synonymous with the file structure of a development project. You can create multiple files within a project and link them all together with Figma's Shared Libraries feature.</p>
<p>For most development projects, especially those that utilise one of the Javascript frameworks, there will be a bunch of files that all play together nicely (hopefully) to build your site. Figma projects are no different if you take full advantage of the Shared Libraries in Figma (and you should). Decentralising files is a key fundamental in modern development and allows for greater reusability and manageability of your code. Thinking of design files like this too will not only make your files more manageable but will also create a wider synergy to your development project when it progresses.</p>
<h3 id="framesdivs">Frames == Divs</h3>
<p>Frames in Figma are your canvases. Frames are where you "paint" the interface of the product or thing you're designing, and in development the notion of "painting" is true too.</p>
<blockquote>
  <p>Sidenote: You may see the phrase "Time to first paint" if you ever do a Google Lighthouse review of your site, this is Google telling you the time it takes for your site to load the initial interface and allow first interaction. If it's slow, you'll score low for SEO and with Javascript-based Single Page Apps this can be a problem, so keep an eye on it.</p>
</blockquote>
<p>Just like in Figma, Divs act as a container for your code and you can stack as many Divs inside each other as you need (just like Frames). By doing this, you build up a structure for your page. This is where it can start to take life. It's important to stay focused on building out the core Div structure before getting into the details. Use quick "styles" on your Divs to create visual separation---even if it looks garish---such as `class="border-2 border-black bg-red-500". I'd use primary colours to separate the independent elements and stop you from nitpicking the details.</p>
<p><a href="https://gist.github.com/kemiljk/67631887f63e7b3b047364ef5df764f4">This Gist</a>&nbsp;is an example of building up the basic structure of my home page container utilising the TailwindCSS library.</p>
<h3 id="autolayoutflexboxandgrid">Auto Layout == Flexbox and Grid</h3>
<p>In the above code you'll see some examples of 'flex', 'flex-row' and 'grid'. These are all layout mechanisms that help to structure the page content in a more fluid and dynamic way. They're particularly important for when you want to create responsive layouts, such as having a 1 x 4 grid turn from a single row into a single column between desktop and mobile. This is exactly what happens in that first grid line&nbsp;<code>&lt;divclass="grid xs:grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4"&gt;</code>. At the smallest breakpoint (phone) it's a single column, at the next breakpoint (tablet portrait) it's two, and then at the next and up (tablet landscape or desktop) it turns into a four-column row. At each stage I implement a 4-point gap to separate the elements.</p>
<p>If you look at the new Figma Auto Layout and Constraints controls, you'll see a lot of familiarity with these flex principles too.</p>
<p><img src="https://res.cloudinary.com/kejk/image/upload/v1608155456/7BDEFC0F-89CB-4CA5-B93C-1B2A55646CEE_ewz2ye.jpg" alt="An image of the Flexbox-like layout" /></p>
<p>An image of the Flexbox-like layout</p>
<p>In the above we can see the flex direction (the down and right arrow) the spacing between elements (in grid, this is the grid-space-row or grid-space-col or in TailwindCSS, gap-{n}), the overall padding (here it's 16px on every side) and the alignment (in our example this is align-center, justify-center).</p>
<p>You can also set resizing constraints. This defines how the object behaves when resized. We can choose between "Hug contents"---where the frame itself (i.e. the Div) is perfectly connected to the width of the objects inside and maintains the padding and wrapping---or "Fixed width" where the the frame width never changes regardless of changes to the internal components. The same rules can be applied to the height property.</p>
<p>Below is how this looks in practice. Hug Contents is above and Fixed Width below. Notice that because I have the align-center and justify-center properties in place, the objects stay perfectly in the middle with fixed width.</p>
<p><img src="https://res.cloudinary.com/kejk/image/upload/v1608155455/F93AD77E-441A-458B-9D80-039C5B97F194_o9tw8w.png" alt="Image example of the different container options on Figma" /></p>
<p>Image example of the different container options on Figma</p>
<h3 id="layernamingidorclass">Layer naming == ID or Class</h3>
<p>Now let's talk about layers and naming. I know, I know, it's totally boring and it's fine to have 'Rectangle 33201' or 'Frame 1000010' on your projects if the actual designs look cool. I've done it many times too. But there is a really valid reason to think more carefully about layer naming, implementation in code.</p>
<p>If you can handover a file that's name logically from a layering perspective (especially if you've taken all the above steps too) then you'll find your Engineer(s) have a much easier time implementing the code as they can use it as their file architecture or map.</p>
<p>Groups should be given a name that characterises the contents. This is what can relate directly to an 'ID' property or a 'Class'. IDs by their very nature must be unique. In real life you can only have a single form of ID from a single source, the same applies to code. You should use an ID once in your code and not again. If you find yourself repeating them then you should swap these to become classes instead.</p>
<p>An ID gives your particular Div or object a unique identifier which determines what makes it different. You could name a Nav Div, for example,&nbsp;<code>NAV</code>&nbsp;as you should only have one implementation of your core Navigation and reuse that component everywhere (more on this later). If that is true, ID it as&nbsp;<code>NAV</code>&nbsp;and apply the relevant classes.</p>
<p>Notice the use of uppercase. Everyone has different practices, but one I think is particularly useful is to use UPPERCASE words to represent IDs and kebab-case for classes. But really you can do what you want. The reason for a difference? Scanability.</p>
<h3 id="stylesclasses">Styles == Classes</h3>
<p>Now, in Figma, if you find yourself reusing a particular style everywhere then you've probably decided (at least I hope so) to create a Figma Style from it. Doing this allows you to create local Text Styles, Color Styles and Effect Styles for a document. That way, repetition is more easy to do and consistency is more likely to be had.</p>
<p>In code we do this too, they're known as classes. Depending on whether you're using a CSS library (like&nbsp;<a href="https://tailwindcss.com/">TailwindCSS</a>) or not will likely determine your approach to classes. Tailwind uses what are known as '<a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">Utility Classes</a>', essentially breaking classes up into atomic parts (see:&nbsp;<a href="http://atomicdesign.bradfrost.com/">Atomic Design</a>). What this means in practice is, like in my example earlier, there's lots of bitty classes used to build up a base idea.</p>
<p>Just look at this button:&nbsp;<code>&lt;button type="button"class="flex flex-row w-full justify-center text-center font-medium btn btn-primary rounded-xl px-6 py-3 bg-blue-400 text-white hover:bg-blue-500 focus:outline-none focus:shadow-outline transition duration-500 ease"&gt;Button 1&lt;/button&gt;</code></p>
<p>That's a big ol' lot of classes to get the button behaving how I want. But equally, it behaves how I want. I've have complete control in the place I'm creating the button, instead of relying on styling in a separate CSS file. And, once you learn the notation style, it actually gets pretty fast to write (see:&nbsp;<a href="https://brianlovin.com/overthought/tailwind-css-first-impressions">Brian Lovin on migrating to TailwindCSS</a>).</p>
<p>The next logical step, of course, is to reduce the amount you do this. And you do this, just like in Figma, through making reusable elements called Components.</p>
<h3 id="componentscomponents">Components == Components</h3>
<p>Now on to the final piece of the puzzle. You've written a bunch of stuff, but you find yourself copying and pasting it all the time. Doesn't it seem silly to do that? Couldn't it be easier?</p>
<p>This is where component based design and development comes in. Breaking things up into reusable chunks makes it easier to manage a big build and increases consistency. The beauty of Components too, is that you can decide how atomic you want to make them. Atomic Design (mentioned earlier) is the extreme end of the spectrum, but if you're already using TailwindCSS then you've already got a bunch of atomic elements to play with.</p>
<p>If I dissect my site, I have:</p>
<ul>
<li>Four core unique pages</li>
<li>One subpage (for blog posts)</li>
<li>Fourteen components</li>
</ul>
<p>I could be much more atomic with my components. If it was a commercial product, I would be, but the reality is that I don't need to be that strict about it. I'm building it to my needs, just like I would a personal Figma file. The most important part of creating a component of anything is thinking about who's going to use it. Think of your website the same way you think of a Figma Design System. If you created icons with their labels as components, do the same, they'll be easier to swap out in a conditional statement. If you created different card component types, do the same, again you can use conditionals to control data differences.</p>
<h3 id="conclusion">Conclusion</h3>
<p>If you're working with engineers on a project, talk it through with them. Ask them how they're planning to execute at a code level and build your project to match. If they're going atomic, go atomic. It'll feel tough in the beginning but the 1:1 match will be worth it.</p>
<p>Most importantly though, learn to make these connections in your head. If you can map what you think of in design to what the end engineering build case could be, you'll find that the process of documenting design decisions and handing over projects become far easier.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/4ac58060-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[What a cult taught me about 'limiting beliefs']]></title>
            <link>https://kejk.tech/thoughts/what-a-cult-taught-me-about-limiting-beliefs</link>
            <guid>641b3f9cd0ab1034f24698bc</guid>
            <pubDate>Fri, 24 Mar 2023 09:16:45 GMT</pubDate>
            <description><![CDATA[You should never feel like you have no limiting beliefs, but you should always fight to overcome them.]]></description>
            <content:encoded><![CDATA[<p>I've long been fascinated by cults from a psychological perspective. Knowing that particular individuals can be so convinced by someone that a set of beliefs and ideals are true, they are willing to give up their previous life in search of this newfound one, both bewilders and intrigues me.</p>
<p>We could argue for ages about what constitutes a cult, people have varying opinions and I know where my beliefs lie, but that's beside the point.</p>
<p>The purpose of this is to think about the idea of "limiting beliefs".</p>
<p>I first learnt about this concept when I was watching the documentary series&nbsp;<a href="https://m.imdb.com/title/tt10222764/">The Vow</a>&nbsp;about&nbsp;<a href="https://en.wikipedia.org/wiki/NXIVM">NXIVM</a>,&nbsp;the celebrity-endorsed cult led by a narcissistic, self proclaimed genius, that did unspeakable things to convince women to brand themselves with his initial.</p>
<p>Interestingly though, like with most cults, it actually started out with positively challenging ideas and concepts that made a lot of sense. Limiting Beliefs feature in many self-help books, seminars and even many religions. They're the concept that we convince ourselves that we aren't capable of achieving something or being someone because we "aren't good enough at it" or "don't live in the right city for that kind of job" or "can't do it because there isn't enough time in the day". Understanding and identifying our limiting beliefs and then---to use common cult nomenclature---reprogramming our minds to remove them is a core tenet of how NXIVM started and actually a positive thing I took away.</p>
<p>I've long had limiting beliefs---which will be evident from previous articles---about my ability to be a designer based on my varied job history or that I'm not really a frontend developer because I can't do everything from memory (despite knowing that most developers are this way).</p>
<p>Lately though, I've been training myself out of this mindset. Using this concept of limiting beliefs to reprogram my own brain and I've done this in the following five ways:</p>
<h3 id="dailygratitudemeditation">Daily gratitude meditation</h3>
<p>I use a gratitude practice to remind myself daily that I'm grateful to be employed as a designer, that I have a network of people who believe in my abilities as a designer and who trust me to do my job. It may seem silly, but that regular reminder to myself helps a lot.</p>
<h3 id="regularpractice">Regular practice</h3>
<p>I never stop practising my skills. Whether it's a paid job or an idea I want to try out, I practice often. I practice design skills, frontend coding skills and writing about the learnings. All of this helps me feel in control of my situation and feel like I know what I'm doing.</p>
<p>I've found that this personal website has become my experimentation ground. I'm not the first person to do this, but it really does make for a safe place to experiment and learn.</p>
<h3 id="beingopenandhonestwithpeopleinmysupportnetworkaboutmyfears">Being open and honest with people in my support network about my fears</h3>
<p>I'm not afraid to talk to those around me about these worries. I speak to my manager often about my feelings of dissatisfaction with my work or output that day. I speak about my worries that I don't feel like I'm really a designer. He reminds me regularly that I was hired as one for a reason and that if I was lacking in areas, he'd tell me. Never underestimate the power of being told that.</p>
<p>I also often worry when it feels like what I've produced is disliked by my team or could be a lot better. But then I'm reminded that we're all stronger in different areas so some things take more time for one person to the next.</p>
<h3 id="mentoring">Mentoring</h3>
<p>I've been practicing being a mentor to junior designers seeking to push their skills forwards, especially within my team. I'm trying to be a voice of experience, imparting the knowledge I've gained about business, stakeholder management, how to manage design-developer handoff. All these things are things I sometimes take for granted but are less well&nbsp;known by junior designers.</p>
<h3 id="writingaboutmyworriesintheopen">Writing about my worries in the open</h3>
<p>Finally, I write out in the open about my feelings more now. You'll notice these articles are often quite personal, and that's important. Sharing my experiences out in the open like this to the people who do choose to read it becomes kind of therapeutic. It's a chance for me to work through how I'm feeling but also to share that it's normal to have doubts and worries.</p>
<p>Not all of these are right for everyone, and please let me know if you have other techniques that could be useful and I'll update this list.</p>
<p>Ultimately though, in this new year, rather than reflecting on the previous year or saying what will be new this time around, I'd rather share some insight from my own personal journey through my limiting beliefs and leave you with this:</p>
<blockquote>
  <p>You should never feel like you have no limiting beliefs, but you should always fight to overcome them. The moment you stop being limited or you stop fighting, you've become too comfortable and need to find your next challenge.</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/411f68a0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Ten Principles for Good Design]]></title>
            <link>https://kejk.tech/thoughts/ten-principles-for-good-design</link>
            <guid>641b3f9cd0ab1034f24698bd</guid>
            <pubDate>Fri, 24 Mar 2023 09:13:30 GMT</pubDate>
            <description><![CDATA[I decided to put together a free, multi-device, minimal wallpaper of Ram's ten principles. ]]></description>
            <content:encoded><![CDATA[<h3 id="afreeminimalwallpaperoframstenprinciples">A free minimal wallpaper of Ram's ten principles.</h3>
<p>I've long been a huge fan of Dieter Rams and his extensive portfolio of work at Braun and Vitsœ.</p>
<p>When I heard that Gary Hustwit was looking for funding to film a movie about Rams' career, I couldn't resist backing it on&nbsp;<a href="https://www.kickstarter.com/projects/1019019367/rams-the-first-feature-documentary-about-dieter-ra">Kickstarter.</a></p>
<p>One of the perks was to get a letterpress of the ten principles on card. This was set in a beautiful font close to&nbsp;<a href="http://atipofoundry.com/fonts/archia">Archia</a>&nbsp;by Atipo (I believe it might be&nbsp;<a href="https://fonts.google.com/specimen/Space+Mono?query=space+m">Space Mono</a>&nbsp;by Colophon) that I wanted to reimagine for the digital screen as a reminder of the principles. This allowed me to have a constant reminder to ensure my designs are always refined and focus on delivering maximum value in a minimal form.</p>
<p>I've made this wallpaper available to download in three sizes for mobile, tablet and desktop. You can grab them below. In my version, I've set this in Archia.</p>
<p><a href="https://res.cloudinary.com/kejk/image/upload/v1590345853/Desktop_bwwsio.png"><img src="https://res.cloudinary.com/kejk/image/upload/v1590345853/Desktop_bwwsio.png" alt="" /></a></p>
<p><a href="https://res.cloudinary.com/kejk/raw/upload/v1590345921/Rams_Ten_Principles_Wallpapers_god3jk.zip">Download all</a></p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/37247a20-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[From problem to plugin]]></title>
            <link>https://kejk.tech/thoughts/from-problem-to-plugin</link>
            <guid>641b3f9dd0ab1034f24698be</guid>
            <pubDate>Fri, 24 Mar 2023 09:10:00 GMT</pubDate>
            <description><![CDATA[Learning Typescript, the Figma API and solving a real personal problem.]]></description>
            <content:encoded><![CDATA[<h3 id="background">Background</h3>
<p>As I've mentioned before, I've long had a passion for learning new skills and that's especially true when it comes to picking up new frontend development skills.</p>
<p>When I started learning&nbsp;<a href="https://www.vuejs.org/">Vue</a>, I chose to utilise the&nbsp;<a href="https://www.vuetifyjs.com/">Vuetify</a>&nbsp;library to speed up the process and allow me to focus less on creating CSS and more on learning the necessary JavaScript and language specifics. Using the Vuetify library taught me the basics of working with APIs to leverage specific behaviour.</p>
<p>When I moved over to using&nbsp;<a href="https://www.figma.com/">Figma</a>&nbsp;as my main design tool outside of my day job, I wanted to find ways to make the process of handing over to development easier. Although Figma does a great job of handling&nbsp;<a href="https://www.figma.com/best-practices/guide-to-developer-handoff/">developer handoff</a>, it renders the font sizes as pixels much like any other design tool does.</p>
<h3 id="thesolution">The solution</h3>
<p>I was desperate to have an easier way to provide the relevant Rem or Em values to developers (including myself) so that I didn't have to find an online converter or just make up random values to try and find the closest match. And that's how&nbsp;<a href="https://www.figma.com/community/plugin/837070613195594890/Px-%E2%80%BA%E2%80%BA-Em">Px ›› Em</a>&nbsp;was born.</p>
<p>Over one evening, I was able to dig into the&nbsp;<a href="https://www.figma.com/plugin-docs/api/api-overview">Figma API documentation</a>, make sense of what was possible and create a basic proof of concept that did what I needed it to do.</p>
<h3 id="thefinaloutput">The final output</h3>
<p>Over the course of the following few days, I made adjustments and updates to the plugin, enabling some extra functionality for changing the base Px value from the browser default of 16px and also allowing for the conversion ratio to be changed based on some common scales (including the Golden Ratio).</p>
<h4 id="thecorepxemfunctionalityis">The core Px ›› Em functionality is:</h4>
<ul>
<li>Open the plugin without selections to convert any number to ems</li>
<li>Select a text node anywhere in your files and open the plugin to see the current pixel value and convert it to ems</li>
<li>Change the current selection to update the input value and enable a new conversion</li>
<li>Change the baseline px value to whatever you want it to be and see the relevant changes in em conversion</li>
<li>Change the scale by which you want to convert based on common scales used</li>
</ul>
<p>Creating the code wasn't as complex as first anticipated, so here's a snippet of how the actual calculation works as a function.</p>
<pre><code class="javascript language-javascript">function pxToEms(px){
 var baseValue = 
  document
   .getElementById('newPx')
   .value;
 var scale = 
  document
   .getElementById('scale')
   .value;
 function calculate(){
 return(px / baseValue)* scale;
 }
 return calculate;
}
</code></pre>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/2de2f090-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Don’t let your role define you]]></title>
            <link>https://kejk.tech/thoughts/dont-let-your-role-define-you</link>
            <guid>641b3f9dd0ab1034f24698bf</guid>
            <pubDate>Fri, 24 Mar 2023 09:06:48 GMT</pubDate>
            <description><![CDATA[A practical guide on how to navigate your career when the path you're heading down isn't the one you truly want.]]></description>
            <content:encoded><![CDATA[<h2 id="">#</h2>
<p>This article started off life as an essay on my career. But as I wrote it I realised that as great as that was to me, it'd be more useful for me to provide some key takeaways that you can use in your own career to push to where you want to be. These are my five key things to remember about your career. What you do doesn't define you. You can be whoever and whatever you want to be, just keep believing in yourself, and keep pushing down that path one inch at a time.</p>
<h3 id="justbecauseyoustarteddownonepathitdoesntmeanyoucantchangetoanother">Just because you started down one path, it doesn't mean you can't change to another</h3>
<h2 id="-1">#</h2>
<p>I started out in retail sales, moved through to account management, then into technical leadership and now into design. None of this was by accident but it certainly wasn't planned. I just kept pushing for and pursuing the path I wanted and felt most comfortable in. You need to do the same. A lot of employers admire people who've trodden a unique path because they bring skills others wouldn't. Be that person.</p>
<h3 id="fightthevoiceinsidethattellsyouthatyourenotworthy">Fight the voice inside that tells you that you're not worthy</h3>
<h2 id="-2">#</h2>
<p>There isn't a day that I don't experience imposter syndrome. I'm constantly in disbelief that I'm actually a designer somewhere. I'm still convinced I "shouldn't be allowed" because I followed an unconventional path. But I am a designer, I do that job and I do it well. It's hard to fight the negative feelings but you have to remember that you were hired for a reason. You didn't lie to get there (hopefully), so just keep doing what you do. Someone will tell you if you're not up to scratch.</p>
<h3 id="dontbeafraidtolearn">Don't be afraid to learn</h3>
<h2 id="-3">#</h2>
<p>This one is probably obvious, but seriously, keep learning. I've never stopped trying to get to the bottom of things and become better at the core skills I need to deliver my job. But equally, I keep pushing to learn more. Teaching myself SwiftUI so I can feel closer to engineering's implementation of our designs, teaching myself Javascript frameworks to be able to build my own personal site and understand the basics of APIs. These are all fundamental to the products we ship, as designers we should know how they work too. Speak in the same language as your developers, it'll save you all so much time and build a stronger team. Trust me.</p>
<h3 id="becomfortablewithbeinguncomfortable">Be comfortable with being uncomfortable</h3>
<h2 id="-4">#</h2>
<p>Get uncomfortable. Push yourself to that point. Then sit there, in it, for a while. Get used to that feeling, it'll help massively with that voice that tells you you're not worthy. The more you get used to feeling uncomfortable, the more you'll be comfortable with it. Psychologists often use&nbsp;<a href="https://www.psychologytools.com/professional/techniques/exposure/">exposure therapy</a>&nbsp;to help people overcome their fears. Slowly introducing them to the thing that makes them uncomfortable for longer and longer times until they eventually become comfortable. Do that to yourself. Offer to do a Lunch and Learn on a topic to the entire team, take on that Webflow project when you've never used it before, offer to man the phones for a couple of hours to deal with customers. Whatever makes you uncomfortable, push yourself to try it, you'll see it's not that bad and you'll grow tenfold because of it.</p>
<h3 id="dontgiveup">Don't give up</h3>
<h2 id="-5">#</h2>
<p>If you've not had that flip yet and you're still in a role you feel defines you even though it's not the "you" you want to be; don't give up. Seriously. It can feel like it's never going to happen. Trust me, I've been there. But if you focus on the earlier steps and commit to that journey, you'll get there. Seek opportunities in your current business to push into areas you want to be in, even be as bold as to ask your manager if there is any chance. You never know, that career flip might be right in front of you, you just need the courage to ask.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/2557e5c0-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How music, design and code are all the same]]></title>
            <link>https://kejk.tech/thoughts/how-music-design-and-development-are-all-the-same</link>
            <guid>641b3f9dd0ab1034f24698c0</guid>
            <pubDate>Fri, 24 Mar 2023 09:11:49 GMT</pubDate>
            <description><![CDATA[Thinking about creative disciplines and how they intersect]]></description>
            <content:encoded><![CDATA[<p>I wouldn’t say I believe creativity is a gift we’re born with. I don’t believe my abilities are. But what I think I do have is a natural tendency towards patterns.</p>
<p>The more I’ve look introspectively at myself lately, the more I’ve come to see that the “red thread” through the three things I’m best at and enjoy, is patterns.</p>
<p>The idea that music, design and development are all ultimately the same at their core has occurred to me many times, most recently when I was listening to the radio. The reason? The specific patterns (né: formula) pop songs all stick to.</p>
<h2 id="popsongs">Pop songs</h2>
<p>There’s only so many pop songs in the world, and they’ve already all been written, rewritten and written again. The people who write them are aware they’re not new, they want that to be true, because there’s a set of sequences that work and work well. Why diverge from them? People like familiarity, it’s human nature.</p>
<p>Design and development for that matter are the same. Design patterns are critical for making something pleasing to the eye. Early in most creative classes you’ll learn about the oft touted “Golden Ratio”. This particular number (1.618) when used as a compositional spacing rule, leads to the most pleasing results mathematically which happen to be aesthetically pleasing too. Why? Pattern recognition.</p>
<h2 id="understandingthisarticle">Understanding this article</h2>
<p>Littered throughout this article are links to other articles and websites. This is deliberate and not due to laziness. Lots of clever people have written great pieces on the things I’m talking about here, so my goal is to collate a series of these thoughts into an abstract of sorts. Think of this like a meta-analysis of these other thoughts.</p>
<h3 id="thegoldenratioandnature">The golden ratio and nature</h3>
<p>If we break down nature’s patterns, we can find the&nbsp;<a href="https://www.treehugger.com/how-golden-ratio-manifests-nature-4869736">golden ratio everywhere</a>. Its in the snowflakes that fall in winter, the leaves that grow on trees, the scales on a fish, or the way a forest grows.</p>
<p>There’s a reason it exists everywhere, its because it creates aesthetically pleasing results. Nature is an incredible thing and the results are beautiful. If we use those patterns ourselves in music, design and development, we get beautiful results too.</p>
<p>So lets break down some of the similarities between the mediums by picking some core terminology and finding some examples.</p>
<h3 id="theruleofthirds">The rule of thirds</h3>
<p>In photography there’s the concept of the&nbsp;<a href="https://photographylife.com/the-rule-of-thirds">Rule of Thirds</a>, where you aim to create a pleasing proportion to your image by aligning the subject to different thirds within their containing frame. Just like all creative rules though, sometimes breaking them leads to more intriguing results, and this is very common when using the rule of thirds.</p>
<p>In design we can use the rule of thirds when&nbsp;<a href="https://designwebkit.com/web-design/rule-of-thirds-web-design/">laying out a website or app</a>, or when composing an article. It can often help us to pair the notion of the rule of thirds with grid layouts. Pairing the two can lead to interesting and dynamic layouts whilst maintaining logic and legibility.</p>
<p>In music we can use the rule of thirds in many ways, mostly it’s a logical way to think about breaking up a composition. Take a traditional&nbsp;<a href="https://www.teenstarcompetition.co.uk/advice/how-to-write-a-pop-song">pop song</a>: intro, verse, chorus, verse, chorus, bridge, middle eight, chorus. Here, to create the catchy moment people always look forward to in songs, often the end of a pop song leverages the idea of using a bridge, then a middle eight (which is often a stripped down version of the same chorus melody) and then ending with a big final chorus. This use of a triad is one of the major reasons pop songs feel so catchy, they’re predictable.</p>
<p>Design and development layouts should also maintain predictability, this predictability is what makes a design usable and pleasing to look at.</p>
<h3 id="grids">Grids</h3>
<p>Depending on who you are,&nbsp;<a href="https://www.interaction-design.org/literature/article/the-grid-system-building-a-solid-design-layout">grid systems</a>&nbsp;are either a blessing or a curse. If we think about them the same as the rule of thirds then we’re on the right path. Grids can be used as a definitive approach to layout or be used as an element we purposely break to provide a unique aesthetic approach. Either one is acceptable, it’s just up to you and your layout intention.</p>
<p>In music we have a similar principle to grids in instrumental composition. Choosing how to “<a href="https://youtu.be/S8fZ62FrquQ">arrange</a>” instruments is vital to the feel of a song. We can choose to have all instruments playing at once, or start with just one and build it up. Similar to grids, we can use different structural layouts to create the final song, and those different structural layouts dramatically impact the feel of the piece.</p>
<h3 id="colourtheoryandwhitespace">Colour theory and white space</h3>
<p><a href="https://99designs.co.uk/blog/tips/the-7-step-guide-to-understanding-color-theory/">Colour theory</a>, surely there isn’t a corollary to anything in music here? Well, not so fast there champ. We can make a comparison here to the idea of harmony. Colour theory is the idea that selecting colours that are opposites on the colour wheel leads to a pleasing compositional choice as they balance each other out. Why is that? It’s because they contain the opposite values, this fills out the colour spectrum to its whole.</p>
<p>In music we have a similar thing. Have you ever wondered why the majority of songs contain drums, bass, guitars/synths and vocals, for example? It’s not by chance, its because these instruments fill the entire audible spectrum humans can perceive. There are only so many frequencies that we can hear, by filling space in each of them we can create audible balance.</p>
<p>Then, in both cases, we can play on this idea by breaking these rules at certain moments. Think of the famous “<a href="https://dj.dancecult.net/index.php/dancecult/article/download/451/457">bass drop</a>” in dance music, or dropping to one guitar before all coming back in, or even moments of complete silence. These are tactics musicians use to create space in the composition and therefore generate the drama and anticipation of when it kicks back in.</p>
<p>In design we do this too by using&nbsp;<a href="https://blog.prototypr.io/importance-of-white-space-in-design-5a40c0e65bfd">white space</a>&nbsp;to create a void between the content and colours, creating impact when we drop back in to the palette. We can also do this by dropping to a single colour for a moment and then bringing back the contrast of our secondary opposite colour to fill the visual out.</p>
<h3 id="rhythm">Rhythm</h3>
<p>You can keep all your instruments together following the same rhythm and harmony. This is pleasing to the ear in the fact that it feels together and its easy to nod your head to. Alternatively, you can mix different rhythms or harmony’s to produce interesting results. In music we have what’s known as a&nbsp;<a href="https://mathdrumming.com/polyrhythms/">polyrhythm</a>. This is a rhythmic device where an instrument maintains a rhythm that falls outside of the time signature of the composition but, thanks to some maths, falls back into time within a later phrase of the other instruments rhythm.</p>
<p>Similarly, in design we can use rhythm and harmony when we think about a layout. When laying out&nbsp;<a href="https://www.jeroenseynhaeve.com/pythagoras-and-vertical-rhythm-in-typography/">typography</a>, rhythm and harmony are words that often come up. That’s because what makes typography often feel pleasing to look at and read is the consistency by which the elements are laid out. If we break this typographic rhythm then it can either have pleasing results (such as for a poster design) or feel unbalanced and terrible because of a lack of visual consistency.</p>
<h3 id="timesignaturesandpacing">Time signatures and pacing</h3>
<p>Much like rhythm, we can use other mathematical devices to play with our composition. Pacing is key to this, it allows us to think about how fast and slow the entire song should be, but also the speed of each section. Is it full time, is it half time. Playing with the pacing is another device we can use to change the feel between sections and drive impact.</p>
<p>If you ever listen to music I’ve written for Echoes, we play on this idea quite often by leveraging the drama of half time. We love dropping to a final half time ending on a lot of our songs. We do this deliberately because it provides the drama and release that the build up to the moment expects.</p>
<p>In design we can do this too by building up different layers of composition. By having sections of your design filled with an image, text and buttons, then dropping to a section with just a single centre-aligned paragraph, then an image, and then back into a full section with all elements. Doing this creates visual drama and dynamism. It also helps to draw attention to the right things at the right time.</p>
<p>Equally, we can play with&nbsp;<a href="https://www.musicnotes.com/now/tips/a-complete-guide-to-time-signatures-in-music/">time signatures</a>&nbsp;which allow us to create different dynamic rhythms to create more unique feels. Jazz is full of this, but so is a lot of modern metal music.</p>
<p>Rap and hip hop use a very common layering of 4/4 backing rhythms and then rapping in&nbsp;<a href="https://hellomusictheory.com/learn/triplets/">triplets</a>&nbsp;over the top. This is what makes the vocals feel like they’re running at a faster pace than the lyrics and feel really fluid. You can count 1, 2, 3 in fast succession over the 4 measures to hear how it works.</p>
<p>In design we can use this idea visually by using contrasting grids on top of each other. Think how it would look to have your type laid out evenly over a 4 block grid but spaced as if it was a 3 block grid. It would create interest by adding additional white space between the words, creating a more intriguing rhythm.</p>
<h3 id="combiningourprinciples">Combining our principles</h3>
<p>In the below example, the navigation bar at the top and falls on the 4 column grid alongside the company logos at the bottom whereas the title section and hero image sit on a 3 column grid. Just like triplets fall inside a 4/4 rhythm, different grids can work in harmony to create more interesting layouts. This combines our principles of grids, rhythm, pacing, colour theory, white space and time signatures. Almost all of them!</p>
<p><img src="https://cdn.cosmicjs.com/f6b51b10-8681-11ec-8e12-4f611a7927fa-Example-of-4x4-with-3x4.png" alt="3x4 text on a 4x4 layout" /></p>
<p>You’ll likely find that you often combine many of these principles, and if you’ve been designing or developing projects for a while then you may find you naturally use a lot of these techniques. Ultimately, this post aimed to show how similar all of these skills really are and how a common thread of pattern-based logic can lead to aesthetically pleasing results.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/1c669f10-ba79-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[‘Users’ are humans]]></title>
            <link>https://kejk.tech/thoughts/why-users-are-humans</link>
            <guid>641b3f9dd0ab1034f24698c1</guid>
            <pubDate>Thu, 06 Apr 2023 17:55:42 GMT</pubDate>
            <description><![CDATA[Design is about people, and I've been thinking a lot about the problem of the term 'user'.]]></description>
            <content:encoded><![CDATA[<h3 id="designisaboutpeople">Design is about people.</h3>
<p>Working in the healthcare sector, it’s sometimes hard to forget those people that you affect the most through the work you do. It can be right there in front of you, seeing children living longer lives because of the work you and the healthcare company you support do. But it’s also sometimes easy to think about those end individuals as ‘users’.</p>
<p>User Experience is a hot topic and has been for some time. Really, it was birthed in Silicon Valley as a way of thinking about the end person using your product and avoid a narrow focus on delivering a solution that you (as in the company) think is the right thing. The problem with a user focus is that it’s easy to abstract the term user into being a statistic. A user is a term we attribute onto a person that uses our product, but it is far too easy for that to become a percentage on a spreadsheet or a cumulative number that appears on an analytics report. Treating the people we affect most as users can have a negative effect on how we think about our products and lead us to believe that our focus is on increasing that percentage or building up those numbers, only.</p>
<h3 id="whyweshouldbehumancentred">Why we should be Human-centred</h3>
<p>Human-centered design is a term that's been explored and advocated for by many established designers from David and Tom Kelley, to Donald Norman and even into architecture by way of Mike Cooley.</p>
<p>My argument is for a permanant change, a move away from user-centricity and user experience and towards human-centricity and human-experience. By doing this, we can’t abstract away who we are affecting. Those directly effected are other humans and as such, it helps focus the mind on doing our best work and allows to think more wholly about what we’re creating.</p>
<p>Numbers are important, we need to keep an eye on those analytics reports and the statistics from audience feedback, but that needn’t draw away from the very humans that we are affecting. Sometimes, decisions that may seem bad statistically, are actually right ethically. Making decisions that directly impact on the humans using your product are often some of the hardest and most important. Losing sight of those real people that you’re affecting with every slight change of pixels on a UI, removal of ‘old’ functionality or choice of distribution platform, can have lasting effects on their respect for your company and the values you represent.</p>
<p>So think carefully about every decision you make as a brand and contemplate the impact on the humans you’re working for, because no matter what you believe, the other humans of this earth are the people you’re helping and those humans need you to care about them first. You work for them, whether it feels like it or not.</p>
<p>Humans are not users, users are humans.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/f9d0b5f0-b9fe-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Designing API-first]]></title>
            <link>https://kejk.tech/thoughts/designing-api-first</link>
            <guid>641b3f9dd0ab1034f24698c2</guid>
            <pubDate>Fri, 24 Mar 2023 09:49:25 GMT</pubDate>
            <description><![CDATA[The power of  visualising your API as part of your design process to align the entire team]]></description>
            <content:encoded><![CDATA[<p>All good design processes start by understanding a business or customer problem and then working out the details until you get to a point of confidence through research to actually build the thing.</p>
<p>The truth is, all good development processes start in the same way. You can't define and design an API without understanding the problem it aims to solve. "Do we already have an API that can provide this if we extend it?", "Should we build a lightweight, and new, API to send these data?", "Is this is even the right problem to solve?" and so on.</p>
<p>Whilst I don't work on constructing or crafting the APIs that I design customer solutions with, I do keep a tight eye on how we're designing the API so I can best understand how we might go about designing a frontend solution that takes advantage of these data.</p>
<h3 id="buildingastrongfoundation">Building a strong foundation</h3>
<p>When I first started working alongside development teams, I found that in most places I worked they operated in a bit of a silo. Design was seen as the paint on top of the technical solution, and whilst we might work closely with mobile engineers to ensure what we designed got built correctly, we didn't really stay close to the backend engineers crafting the APIs.</p>
<p>Over time I got super curious. We send data to our frontends via this mysterious thing call an API, what is that and how can I better understand it to know the impact it might have on my work?</p>
<p>An API, or Application Programming Interface, is a mechanism by which you can send or receive information over a network to update or interact with an interface. There's lots of different methods you can utilise such as POSTing something (sending it), GETting something (receiving it), DELETEing something (deleting it…) or PUT/PATCHing it (modifying it).</p>
<p>As designers, we should care about what data is being sent around because it inherently defines what we might show to a customer or what controls they might be able to interact with.</p>
<h3 id="makingapistangible">Making APIs tangible</h3>
<p>Let's say you have a form that you want to allow a customer to enter their name and email into. Understanding that this is an input that allows the customer to&nbsp;<strong>send</strong>&nbsp;data to a server to store this information is super handy. This means that submitting this form would send a&nbsp;<code>POST</code>&nbsp;request via the API to your server to append these data to the database.</p>
<pre><code class="javascript language-javascript">[  
  {  
    "name": "Will Smith",
    "email": "will@freshprince.com",
    "weapon": "slap"
  }
]
</code></pre>
<p>But lets say you decide after the API is built and the success criteria are defined, that you now want a customer to be able to add their phone number. In this case, firstly the API isn't built to handle a number or to send that particular request, so now the backend team will have to modify the API (and also importantly, the database) to understand that a number can also be sent.</p>
<p>Sounds easy right? But imagine if you're making lots of these tiny changes, things like splitting name into&nbsp;<code>firstName</code>&nbsp;and&nbsp;<code>lastName</code>. In most companies, the backend work will start before the build phase begins. This means that any change has a risk of derailing the approach that was originally conceived by the backend team.</p>
<p>You hopefully already had some thoughts, sketched some ideas and started to ideate, but hadn't finished with your design by the time you raise these changes. This is good, you're working in an agile team, but you're also at a point of increasing project scope and increasing the project risk.</p>
<h3 id="deriskingdesignandapis">De-risking design and APIs</h3>
<p>One exercise I like to do to prevent as much of this risk as possible is to design API-first. By designing the API in tandem with the backend engineers, you de-risk future problems. You can eek out the edge cases and plan for possible future adaptability together.</p>
<blockquote>
  <p>"If I decided to add in the need for a mobile number to be sent too, would that be a lot of extra risk? This idea is still being considered but isn't final"</p>
</blockquote>
<p>A great way to do this is to build out your foundation together via early stage workshops. Recently I've introduced the practice of including a representative across each of our respective teams at the very start of the design process, when we're discovering the problem to solve. This means we have Design, Product, Mobile, CloudApps (backend) and QA in the room (sometimes also customer support or ops depending on the project).</p>
<p>Including these teams early means we define edge cases from the outside and design a flexible API and design solution that works for all teams across build, testing and production.</p>
<p>We've started workshopping all of this work inside of&nbsp;<a href="https://www.figma.com/figjam/">FigJam</a>&nbsp;and it's been game-changing.</p>
<p>Last year, FigJam introduced the ability to include code blocks in your diagramming experience. This opened FigJam up to being super useful for engineering teams who are writing particular code and want to connect the dots. I noticed a few team members were using it to connect their APIs to mobile code which helped them to better visualise how the data would pass down and be rendered.</p>
<p><img src="https://imgix.cosmicjs.com/59bfb450-0a84-11ed-b7be-d956591ad437-CleanShot-2022-07-23-at-13.36.432x.png" alt="An image of a FigJam canvas with API documentation pointing to different Wireframes to show where the data is passed to in each case" /></p>
<p>An image of a FigJam canvas with API documentation pointing to different Wireframes to show where the data is passed to in each case</p>
<p>I decided that it made sense to me, as a designer, to include this type of thinking into my flows too. So I started to get the teams to share their API docs with me so that I could include them as flow starting points for certain wireframe screens. Now, the connection between what data we expect, when we expect to receive it, and how it changes the view was all in one place.</p>
<p>When QA then came to test the edge cases, they knew when we'd expect to have received (or sent) data to or from the API, and in turn how that would impact the user interface. All teams would be on the same page, from the start to the end.</p>
<h3 id="howthisisimpactingourshippingprocess">How this is impacting our shipping process</h3>
<p>Since taking this approach, we've seen several cases where the time to delivery has been significantly reduced, that the edge cases we find aren't show stoppers because we knew what to expect from the start, and that our teams could all be aligned from the outset.</p>
<p>Our end-to-end QA process is significantly improved because the data they test with in Postman is aligned to the docs and flows we have in FigJam, and there's very little left to ambiguity.</p>
<p>This is still the exception and not the rule, we've been trialling it in our team because my knowledge of code allows me to suggest and test these approaches whilst understating what the APIs mean and why it's useful. Onboarding other designers and teams to this idea will likely be challenging because the value isn't immediately obvious, and the lack of technical understanding will be a limitation.</p>
<p>But, this is something I see as a great opportunity for teaching. I've been putting more and more energy into teaching my team how to understand the raw basics of coding, focusing initially on basic JavaScript as part of Figma plugin development, but slowly moving into understanding how data passes between platforms and why this matters to their day-to-day.</p>
<p>If you're a designer who's comfortable in the world of code, or who's interested to learn more about it, I'd highly recommend reaching out to your backend engineers to start a discussion around API design and its place in the design process.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/b70e7de0-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Relative seniority]]></title>
            <link>https://kejk.tech/thoughts/relative-seniority</link>
            <guid>641b3f9dd0ab1034f24698c3</guid>
            <pubDate>Thu, 06 Apr 2023 17:53:33 GMT</pubDate>
            <description><![CDATA[How your title is reflective of your company's stage as well as your level.]]></description>
            <content:encoded><![CDATA[<p>I recently saw a&nbsp;<a href="https://twitter.com/brian_lovin/status/1456665626802458624?s=20">tweet</a>&nbsp;from Brian Lovin that talked about salaries some of the Senior++ designers were being offered by startups he's been talking to lately.</p>
<p>If I'm honest, I was shocked and surprised because here in the UK, demanding that level of salary for a non-Director level position is unheard of. Aside from the debate about these ridiculous figures, it also got me thinking about the series he ran on&nbsp;<a href="https://staff.design/">staff.design</a>&nbsp;around being a senior IC and what that meant.</p>
<p>Over the years I've had roles that took me up and then back down and now on the up again in terms of seniority and it got me thinking;&nbsp;<strong>seniority is always relative</strong>.</p>
<p>If like me you've worked for startups at any point in your career you'll know that it's common to find yourself (or to see other teammates) be---or become---super senior, super quickly because the team size is small and your relative impact is large. I, for example, managed to move from a mid-senior level Account Manager to being a Lead UX Architect in a matter of 2-ish years at an org that started at 3 and ended up at 40… that would be unheard of at a larger org and in reality wasn't reflective of my actual skill level.</p>
<p>Whilst I wouldn't want to talk down my abilities, I know that in reality, I was what I've now come to coin: "Lead(Senior/Director) by Default". Because there was no one in the business with more knowledge than I had around user experience and information architecture, I was accelerated to a more senior position to anchor me relative to the business. However, as the company grew that became hard for them to handle. What was next for me? I thought it was Digital Director or Head of UX, but at 28, did that make business sense? Not really. Did I have the amount of skill to lead an org as it grew? Probably not.</p>
<p>The business growth immediately impacts whether you're truly at that defined level or not, but when you've been assigned such a senior role already, how then can someone more senior be brought in above you? I heard mutterings that this might happen whilst I was in the aforementioned role, and despite it being logical I was obviously frustrated and ultimately decided it was one of several factors that led to me leaving the company. Was that right? In hindsight yes as I've grown even more as a result, but it meant that I had to find my next role, and work out what my relative seniority was to the next org I was joining.</p>
<p>I applied for a bunch of roles at that Lead/Director level because I thought to myself,&nbsp;<em>how can I leave and join at the same or lower level, that doesn't look good</em>. In the end, I found another role where I could join at a senior level but due to the Pandemic that didn't work out. Following this, I joined&nbsp;<a href="https://www.homehero.co.uk/">HomeHero</a>, another startup but at a non-defined level. I was simply a Product Designer and my seniority was known through skill, knowledge and my ability to provide the Design Ops skills missing in the business. So I was senior in all but title, and that was fine.</p>
<p>After joining&nbsp;<a href="https://www.moneyboxapp.com/">Moneybox</a>&nbsp;at a mid-senior level, I realised very quickly that title is relative to the company size. We have a 10-person design team with a range of experience, and again my seniority is relative to that. I'll be pushing for senior in my next performance review, and that'll suit where I am in the org skill and influence-wise, but it could seem like a long way down from where I "was" before.</p>
<p>I've learnt to accept that titles are relative and I think it's an important lesson for us all to take away. Joining an org at whatever title may just be reflective of your skill-level relative to that org's incumbent skills. It doesn't mean you're moving down in your career and in fact that opportunity might afford your more growth in the end. Look at yourself relative to those in the team around you, be accepting of the opportunity to learn from others and think about what this will mean for your future career.</p>
<p>My pithy advice to anyone reading this is to take a new role based on the opportunity for growth and happiness.&nbsp;<strong>Don't chase titles</strong>.</p>
<blockquote>
  <p>Update: Brian pointed me to a&nbsp;<a href="https://medium.com/@gokulrajaram/the-one-thing-ceos-should-delay-as-long-as-possible-ea28347714b0">great article</a>&nbsp;by&nbsp;<a href="https://twitter.com/gokulr">Gokul Rajaram</a>&nbsp;that talks about this in detail. It's from 2017 and yet we're still stuck in this old way of thinking. If Square can manage it, so many more organisations can too.</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/81e15cf0-ba00-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Spatial Design]]></title>
            <link>https://kejk.tech/thoughts/spatial-design</link>
            <guid>641b3f9ed0ab1034f24698c4</guid>
            <pubDate>Fri, 24 Mar 2023 09:28:18 GMT</pubDate>
            <description><![CDATA[Product Design is a term we use broadly these days to define a designer who creates products.]]></description>
            <content:encoded><![CDATA[<p>Product Design is a term we use broadly these days to define a designer who creates products. This is a term that was often super unclear in my early days as I confused it with the role of an Industrial Designer. In reality, whether the product is digital or physical, designing a product makes you, technically, a product designer.</p>
<p>We've continued to expand the spectrum of what a Product Designer is and what their craft should be; from apps to websites, and virtual reality to audio-only, from physical products to the intangible. Product Design is the art of building something from nothing, but I'm seeing a shift in what that role should encompass, and I think we're going to have to hone our craft to include a new skill: Spatial Design.</p>
<p>Whether it be visual space or auditory space, being able to design for different spatial planes will be critical to the success of the next breed of designers as AR, VR, MR and audio-only platforms take off as the mediums of the future.</p>
<p>With the announcement of&nbsp;<a href="https://www.apple.com/uk/airtag/">Apple's AirTag</a>, playing with the delightful experience of finding a lost tag got me thinking carefully about what this design experience really was. The experience included a physical product, a visual experience (including physics-rendered objects), a sense of spatial plane (vertical and horizontal direction), haptic feedback, and an auditory experience. That's a lot of things to cram into a single, small, $29 product.</p>
<p>The key to the success of the AirTag experience is in the team's sense of spatial planes when designing for it. Navigating the space of a room, understanding if the product is up or down from my current phone's placement, thinking about when audio and haptic feedback play a key role in the finding experience. It's so many layers of complexity that lead to a cohesive and satisfying customer experience.</p>
<p>Comprehending that a single designer could ever create something like this is mind boggling, so its clear that this is a prime example of Apple's commitment to owning the entire stack and having individuals across the org playing a role. Say what you will about the anti-trust element to this, as a customer it's a perfect experience, so there you have it.</p>
<p>No single designer should be expected to think of everything that leads to this product's success, or be capable of delivering upon it, but being able to have even one part of the vision for it and think about how all those world's collide is something I think all designers would benefit from. Being able to think about Spatial Design when putting together a product in Figma that is purely two-dimensional will be critical to being a successful designer in the next few years. Spatial Design doesn't have to mean that you design the spatial experience, but having understanding of the technology at play and the empathy to be in the shoes of the customer in that moment is crucial. And designing an experience that feels in concert with the physical experience will be essential too.</p>
<p>This mindset follows on from my belief that all Product Designers should understand the core concepts of the development stack, even if they don't code [<a href="https://www.kejk.tech/thoughts/designing-in-code">1</a>,&nbsp;<a href="https://www.kejk.tech/thoughts/code-as-design">2</a>,&nbsp;<a href="https://www.kejk.tech/thoughts/thinking-in-design-code">3</a>]. Knowing how your idea is built is crucial to being able to design optimally for it. With spatial design, it's exactly the same.</p>
<p>As we see the rise of AR, VR, MR and audio-only platforms, we'll see the need for designers to think about the spatial experience increase. There'll become plenty of specific jobs for AR Designer, Audio Designer, Spatial Designer and so on, some of these even exist already if you look in the right places. But we'll also see the need for regular Product Designers to be thinking about the spatial experience alongside the host of other things they think about daily when designing products for customers.</p>
<p>Customers will become increasingly invested in these spatial technologies, and as they do, designers will need to step up to the plate to deliver on those world class experiences. AirTag and Google Maps'&nbsp;<a href="https://www.theverge.com/2019/8/8/20776247/google-maps-live-view-ar-walking-directions-ios-android-feature">AR directions</a>&nbsp;are just the start.</p>
<blockquote>
  <p>Update, at WWDC21, Apple put together an&nbsp;<a href="https://developer.apple.com/wwdc21/10245">excellent video</a>&nbsp;on how to design for spatial interactions. I highly recommend checking it out!</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/fdc1d0d0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The power of Cosmic]]></title>
            <link>https://kejk.tech/thoughts/the-power-of-cosmic</link>
            <guid>641b3f9ed0ab1034f24698c5</guid>
            <pubDate>Fri, 24 Mar 2023 09:24:58 GMT</pubDate>
            <description><![CDATA[Not too long ago I decided to set myself a challenge; create and add new content to my website via a CMS.]]></description>
            <content:encoded><![CDATA[<blockquote>
  <p>Note: I work for Cosmic but this post is not directly affiliated with them and is my own set of opinions. I found Cosmic and starting using it before I worked with them, and actually its how I ended up working there!</p>
</blockquote>
<p>Not too long ago I decided to set myself a challenge; create and add new content to my website via a CMS.</p>
<p>So let's back it up. I'm a designer by trade but I tend to get my feet wet in the development side too. If you've read my posts previously or even looked on my site, you'll notice the distinct 50/50ish split of design and development projects and/or posts. Being in control of the majority of the stack when it comes to projects I work on has proven super useful in terms of creative control and individual learning. But one thing I've always found too abstract and difficult to learn is backend development.</p>
<p>Frontend dev and design go hand in hand. I've spoken vocally before about my belief that Designers should understand&nbsp;<a href="https://www.kejk.tech/thoughts/code-as-design">how their work is built</a>&nbsp;and should ideally be&nbsp;<a href="https://twitter.com/_kejk/status/1380866907377647618?s=21">comfortable</a>&nbsp;experimenting in that world themselves too.</p>
<p>Backend has always felt more complex to me, and APIs were a terrifying concept, so I went on the hunt for a headless CMS option to power my website and get my start in implementing API-driven updates to my website. I was looking through a host of different options but specifically trying to get a good free tier that would enable me to power my website fully without having to pay until I was sure it was the right thing for me. This site makes me £0, so keeping it as free as possible to run is ideal (coincidentally this site only costs me about £6 a month to run if you divide up the domain cost per year).</p>
<p>During my hunting I came across&nbsp;<a href="https://www.cosmicjs.com/">Cosmic</a>&nbsp;and saw that it had a super generous free tier, one that could end up being viable for long-term use. Cosmic is a headless CMS that decouples your content from your frontend. By doing this, it meant I could create content 'buckets' (to use Cosmic's nomenclature) to separate my content into different places and power different projects from it (more on why this is great later!).</p>
<p>Below I've written five pieces of value a headless CMS can bring to your project or projects.</p>
<h3 id="1decoupleyourarchitecture">1. Decouple your architecture</h3>
<p>By decoupling your backend from your frontend you can live in a world of a "separation of concerns". This is important. By separating your content from your UI, you avoid putting all your eggs in one basket. I use&nbsp;<a href="https://www.nuxtjs.org/">Nuxt</a>to build this website [edit: this is now built in&nbsp;<a href="https://www.nextjs.org/">Next</a>, so I could have used the&nbsp;<code>content</code>&nbsp;module to write markdown and post into my site. That leaves me reliant on Nuxt or another markdown-driven module, it couples me to the architecture. But by using Cosmic, I'm able to write my markdown (like this post for example) in&nbsp;<a href="https://www.getdrafts.com/">Drafts</a>&nbsp;and then&nbsp;<a href="https://www.cosmicjs.com/articles/how-to-post-to-a-cosmic-bucket-directly-from-the-drafts-app-d939e480-3bc8-11eb-a739-b574ca5054de">write a little script</a>&nbsp;to publish straight to my Cosmic bucket (and which now also runs a webhook in Vercel to republish my site and posts a draft into my&nbsp;<a href="https://www.buttondown.email/">Buttondown</a>&nbsp;backend to create a new subscriber post). Now I'm not reliant on Nuxt, so if a new framework shows up, or I decide to go back to vanilla JS again, I can still simply integrate all my content again.</p>
<h3 id="2separateyourcontentintoprojectsorbuckets">2. Separate your content into Projects or Buckets</h3>
<p>Your CMS may use different nomenclature for what Cosmic calls a Project or a Bucket, but essentially, each time you're working on a new project you don't need to spin up a brand new backend necessarily. By having a single Cosmic instance, you can spin up as many Projects or Buckets as you like.</p>
<p>For this site I have a single Project with a single Bucket that contains all the necessary objects I need. I can then also target that Project but a separate Object to power my&nbsp;<a href="https://www.plugins.run/">Plugins.run</a>&nbsp;site. I could also push that Object into its own Bucket if my needs grow.</p>
<p>But most importantly, it allowed me to spin up a new Project with some collaborators to build an exciting new&nbsp;<a href="https://twitter.com/_kejk/status/1387739445944782855?s=21">Figma plugin</a>&nbsp;project where all content is powered by Cosmic's backend… how awesome is that!</p>
<h3 id="3automatetheuploadofcontent">3. Automate the upload of content</h3>
<p>On the topic of that Figma plugin, we have a lot of files to deal with from the outset (541 so far to be precise) which meant that we needed a way to get this content up quickly and easily. My collaborator&nbsp;<a href="https://neef.co/">Neef</a>&nbsp;put his skills to work and built a rad upload automation that meant we could easily post all of our files to Cosmic via the&nbsp;<code>add Object</code>&nbsp;endpoint by just dumping them in a folder locally and running&nbsp;<code>npm run upload:assets</code>. This stopped me from manually doing all 541 (I'd already done about 30 manually and that was horrible).</p>
<p>Without a headless CMS with a solid API, this would have been entirely manual and painful when each object has 5 points of metadata that need handling. It doesn't sound like a lot, but that's repetition over 2000 times, and this was just for the first set of data.</p>
<h3 id="4poweranything">4. Power anything</h3>
<p>Following on from the above, by being able to power my website projects and also now a Figma plugin, it shows that a headless CMS can actually power anything. You could use one to power a website or app's content, power a plugin or integration or even just as a repository of information you want to store.</p>
<p>My next goal is to start thinking about powering content in a native iOS app with my Cosmic CMS. Not sure on the project for this yet, but if you've got ideas for something, send me an&nbsp;<a href="mailto:karl+appIdeaProject@kejk.tech">email</a>.</p>
<h3 id="5teachyouaboutapis">5. Teach you about APIs</h3>
<p>Finally, learning how to implement your content via a headless CMS teaches you how APIs work and helps you to understand the relationship between content and UI and how this separation of concerns can improve, future-proof and power any project you're working on.</p>
<p>Also, don't forget, you can go back and add a headless CMS solution to an older project. I did this with my pre-Nuxt website which used bare Vue (and thus didn't have the SEO benefits Nuxt brings) and it worked like a charm.</p>
<h3 id="timetostartsomething">Time to start something!</h3>
<p>Ultimately, a headless CMS offers freedom and power. If you're not sure whether one is the right fit for what you're doing, then I challenge you to try and find a way to make sense of it and do it. Everything you create in Cosmic is just a JSON object that can be returned via the API. So if you're working on anything digital, you can use that JSON to do something. So I'd say, anything is possible!</p>
<p>If you get stuck or want some advice, feel free to get in touch via the form below or head over to the&nbsp;<a href="https://www.cosmicjs.com/articles">Cosmic community</a>&nbsp;and see what people are building!</p>
<blockquote>
  <p><strong>Update:</strong>&nbsp;I've been working now with SwiftUI for a while and I can say I truly love it. It has flaws, it has missing pieces but it's generally excellent to use. Especially as a designer.</p>
  <p>I've spent the past few weeks building an app to support my personal bookmarks and blogs so I can easily view, edit and update from my phone, iPad or Mac any time. It's taught me even more about how powerful Cosmic's headless approach to content is and shows you can literally power anything with it.</p>
  <p>And with dashboard V2 in early preview, I can't wait for what's next.</p>
</blockquote>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/e32427f0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Designing in the open]]></title>
            <link>https://kejk.tech/thoughts/designing-in-the-open</link>
            <guid>641b3f9ed0ab1034f24698c6</guid>
            <pubDate>Fri, 24 Mar 2023 09:19:30 GMT</pubDate>
            <description><![CDATA[What I’ve learnt about sharing constantly and live designing with my team.]]></description>
            <content:encoded><![CDATA[<h3 id="whativelearntaboutsharingconstantlyandlivedesigningwithmyteam">What I've learnt about sharing constantly and live designing with my team</h3>
<p>Designers are precious people. Arguably, the vast majority of Creatives are precious people. From my own personal experience, observing teammates and generally speaking to other creatives, it's apparent that we seek perfection and are often uncomfortable with sharing works in progress.</p>
<p>If you work in design, you'll be familiar with the WIP abbreviation. You might have used it in file extensions&nbsp;<code>homepage_redesign-WIP.fig</code>&nbsp;or within the document itself&nbsp;<code>homepage_newScreens-WIP</code>or you may go as far as using more blunt language to try and stop prying eyes&nbsp;<code>homepage_newScreens-NotReadyYet-DO_NOT_TOUCH</code>.</p>
<p>When I moved to HomeHero, I was one of two designers. The very nature of having two individuals meant that we were somewhat forced into working in the open. We, in most cases, would be working across the same files because of the needs of the organisation at the time.</p>
<p>One thing we did though, was use Figma. By default, Figma's goal is to enable and encourage working out in the open. Whether that's through the cross-platform, web-based tool's easy sharing options, or the multi-cursor features, it became super easy for us to bring product managers and developers into the fold too.&nbsp;</p>
<p>As we've grown, we've ensured that we maintain this approach to working. Although we only open access to our files once they're in the right shape, we actively seek product manager and developer input during the early stages of design. Allowing them in to the fold when the file is still a mess of ideas and mistakes ensures that we don't spend too long going down the wrong path or thinking we've understood the brief but we've actually got it hugely wrong.</p>
<h3 id="beingconsistent">Being consistent</h3>
<p>This is all well and good, but it's easy to lose consistency with this and retreat back to the WIP-obsessed designer mindset.&nbsp;</p>
<p>We've done it as a team. We started with really open access in Figma. Anyone with a HomeHero email address could just jump in to any file and have a nose around and have their say. We experienced a few moments where we got some unhelpful feedback on parts of a project that were just experiments. And the problem is, no matter what the page was labelled or what text is included on the page, it's not always clear to an outsider that something is an experiment.</p>
<p>It's not an issue just for us as designers. Receiving unnecessary feedback isn't helpful, and it's also a huge waste of time for the person who spent their precious hours adding comments to something that was a passing idea anyway.</p>
<h3 id="findingahappymedium">Finding a happy medium</h3>
<p>In order to maintain our openness across the organisation, whilst also ensuring we don't fall into the old traps, we've spent some time crafting a way forwards.</p>
<h4 id="ourdefaultpositionisthatonlydesignhavefigmaaccesstoourteamnow">Our default position is that only Design have Figma access to our Team now.</h4>
<p>This means that only the design team have open access across all the Figma documents we've created. This allows us to be working out in the open within the confines of the Design Team. It stops us from keeping our ideas just to ourselves, obsessing over them until they're "perfect", but it also ensures we don't end up in the land of unnecessary comments.</p>
<h4 id="weaddtherelevantpmdeveloperandandotherstoasingularspecificfile">We add the relevant PM, Developer and and others to a singular, specific file.</h4>
<p>By only adding the right people to the right file at the right time, we guarantee that we've put the file into the right kind of state to receive the feedback we need, but without resorting to &nbsp;<code>homepage_redesign-final_FINAL.fig</code>.</p>
<h4 id="wedesigntogetherlive">We design together, live.</h4>
<p>The main thing we spend a lot of time doing now---beyond collaborating inside the same design files---is actually designing whilst sharing our screen.&nbsp;</p>
<p>If we're working through a specific problem, we've found that screen sharing-based design sessions work great. In some ways we're trying to mimick the idea of being able to do in-person peer-designing or whiteboard sessions, but we've found that it really increases our ability to take an idea from experimentation through to a more defined execution.&nbsp;</p>
<p>Oftentimes, one of the team will share their screen whilst designing and we'll all jump into the file too. This means that we can let one person essentially lead the design process whilst still dropping in and adding things we think of in the moment.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/ccf4fcc0-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Code as Design]]></title>
            <link>https://kejk.tech/thoughts/code-as-design</link>
            <guid>641b3f9ed0ab1034f24698c7</guid>
            <pubDate>Fri, 24 Mar 2023 09:18:53 GMT</pubDate>
            <description><![CDATA[How development can be learned through a design lens (and how I've managed to do it). ]]></description>
            <content:encoded><![CDATA[<h3 id="howdevelopmentcanbelearnedthroughadesignlensandhowimanagedit">How development can be learned through a design lens (and how I managed it)</h3>
<p>I've said it before, but I am primarily a designer. From an early age I was always drawing and building things, and always asking "why?", I'm naturally curious I guess. But I've also explored frontend development from the early years too.</p>
<p>I grew up in what I now consider the golden age of the web. I was a pre-teen during the 90's and I got really into modding my Windows 98 and&nbsp;<a href="https://www.instructables.com/Custom-Windows-UI/">XP</a>&nbsp;interfaces to feel custom to my interests at the time (and let's not forget those&nbsp;<a href="https://winampheritage.com/skins">Winamp skins</a>). So I guess, although I wasn't coding at the time, I was beginning to appreciate the link between how the interface&nbsp;<em>looks</em>&nbsp;and how it&nbsp;<em>works</em>.</p>
<p>In those days, you could do a minimal amount of work to change the appearance, but because you had to install a bunch of different patches and programs to make it work, it did require a reasonable amount of logic and computational literacy to get it working.</p>
<p>As I got older and things developed online, I got a&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.myspace.com">MySpace</a>&nbsp;account and learnt about the power of HTML and inline styling of CSS. Using "View Source" I could steal the code other people wrote and modify it to my needs. Again, because I'm visual-first, I started with hunting down the mods I liked the look of the most and then modified their code to suit what I liked. Starting with colours, I then worked my way into sizing and, hiding things I didn't like by targeting their&nbsp;<code>id</code>&nbsp;element and hiding them with&nbsp;<code>display:&amp;nbsp;none</code>.</p>
<p>After MySpace went down the pan---before Justin Timberlake resurrected it and made it weird---and things moved on, I drifted away from code and moved more towards the creative side of things. But over the years I was exposed more and more to code through my jobs. And whilst working at&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.cognite.co">Cognite</a>&nbsp;I was fortunate to meet a good friend,&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.nick-wilkins.com">Nick Wilkins</a>, who helped me (and still does) figure a bunch of things out to make me more comfortable with code. More about that here&nbsp;<a href="https://www.kejk.tech/thoughts/designing-in-code">Design as Code</a>&nbsp;.</p>
<h3 id="backtocode">Back to code</h3>
<p>Since then, I've been pushing myself to learn more and more about how to implement my design ideas in code. I started by pushing myself to write my&nbsp;<a href="https://kejk.vercel.app/">original personal website</a>&nbsp;in pure HTML and CSS. It was clean and simple, but it did the job and refreshed my knowledge. Looking back at it now, it's not that far off where I am now visually, but it's a much more stripped back approach and a far more manual site to update.</p>
<p>The funny thing is, I didn't design this page first. Contrary to the usual approach, I wanted to leverage something I've talked about before&nbsp;<a href="https://www.kejk.tech/thoughts/designing-in-code">Development-based Design</a>.</p>
<blockquote>
  <p>I'm not saying you should go away completely from using design tools (I still heavily use Adobe XD and Figma), but I am saying that understanding how to design in code is a superpower that all digital designers should aim to possess.</p>
</blockquote>
<p>By manipulating everything in the browser as I went, I learned even more about the power of code, but it felt like something was missing for me. I wanted to find a way to learn the more reactive programming approaches. There'd been all this talk about&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.reactjs.org">React</a>&nbsp;and it just seemed like a really good thing for me to push towards. But then I looked at it…</p>
<h3 id="theproblemwithreactandwhyipickedvue">The problem with React and why I picked Vue</h3>
<p>For me, React just didn't properly click. For developers who understand Javascript it offers really powerful ways to build better, more reactive websites. But as a designer who moved into learning code, it was too hard for me to actually make sense of. The leap from HTML and CSS to React was massive and it put me off.</p>
<p>Welcome&nbsp;<a href="https://vuejs.org/">Vue</a>! I stumbled across Vue by accident. I knew I wanted to learn something more reactive so I started searching around, found Vue and it just clicked instantly. I dropped the CDN script into a prototype project I was working on at&nbsp;<a href="https://www.neuerenergy.com/">NeuerEnergy</a>&nbsp;and I was away. I could write the HTML and CSS I knew, and then inject some Javascript in---when I wanted to and had learned to---to power up the site with clever reactivity.</p>
<p>So then my love of Vue began and I decided the best way to learn it better was to rebuild my personal website in Vue. So welcome&nbsp;<a href="https://kejk.kejk.now.sh/">KEJK v2</a>. I decided that because we'd been leveraging the power of Material Design at NeuerEnergy, I wanted to do the same for my personal website (avoiding too much brain overload) and thus found the&nbsp;<a href="https://vuetifyjs.com/en/">Vuetify library</a>&nbsp;to help me on my journey. This meant I could build in the same way I could design, using a design framework that already made sense to me. If I wanted a card, Vuetify had a&nbsp;<code>&lt;v-card&gt;</code>to offer me, if I wanted to break into a grid, I had&nbsp;<code>&lt;v-row&gt;&amp;nbsp;and&amp;nbsp;&lt;v-col&gt;</code>to help me out. It all just made sense.</p>
<h3 id="vuenuxtcosmicdraftsandtailwindcss">Vue, Nuxt, Cosmic, Drafts and TailwindCSS</h3>
<p>I loved that personal site, it also provided me with a lot of interest from prospective employers when applying for other design roles. Being able to tell them that I'd built the website myself and used Vue to do so gave me a level of skill that other designers weren't always able to offer. This doesn't mean I was&nbsp;<em>better</em>&nbsp;in any way, I just offered&nbsp;<em>different</em>&nbsp;skills and sometimes those skills are super helpful for the right design team.</p>
<p>I found that exact design team. In my current role at&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.homehero.co.uk">HomeHero</a>, I was hired specifically because I could span the breadth of design and development. Connecting Design and Engineering teams is often an overwhelming and complex task. More often than not, projects aren't handed over properly and a lot of important information is either lost in translation or just straight up missed. Usually, this isn't the fault of anyone particularly, better processes could help (I'll be writing about this at some point soon) but also understanding the language of development and being able to understand&nbsp;<strong>what it takes</strong>&nbsp;to deliver on your grand "cross-device isometric animated timeline" can have a massive, lasting impact on the connectedness of your team and the quality of the outcome. Moreover, I'm able to work directly with the Engineering team to style the frontend of some of our projects, lifting a weight off of them and giving Design the power to own the interface from idea to execution.</p>
<p>So what was next for me? Well, as you can see there were two iterations of my previous site but you're reading this on the third. I realised that I had an opportunity to improve things. I wanted to make my content more reactive and allow myself more opportunities to utilise a headless CMS to power a lot of the content that could change regularly. This is when I came across&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.cosmicjs.com">CosmicJS</a>. Cosmic is a super flexible,&nbsp;<strong>really well documented</strong>&nbsp;headless CMS (with an unbelievably generous free tier). Cosmic has allowed me to power pages such as my&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.kejk.tech/thoughts">Thoughts</a>&nbsp;(where you're reading this) and&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.kejk.tech/uses">Uses</a>. Now I can update content via Cosmic's simple backend, avoiding any need to dive into the code to create a new blog post or update my gear.</p>
<p>Right now, I'm writing this on&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.getdrafts.com">Drafts</a>&nbsp;for iPad and will be posting it to my Cosmic bucket using a custom&nbsp;<a href="https://actions.getdrafts.com/a/1fP">POST action</a>&nbsp;I wrote. This makes things frictionless for me now.</p>
<p>I've also refactored the site to use&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.nuxtjs.org">Nuxt.js</a>&nbsp;so I can take better advantage of dynamic page routing, SEO meta info and their module system. I even went as far as to ditch my use of Material Design and refactored all of the HTML to use&nbsp;<a href="https://app.cosmicjs.com/kejk-next-production/edit-object/www.tailwindcss.com">TailwindCSS</a>. This means I'm looking up docs less and focusing on writing code in a way my brain already thinks… in CSS.</p>
<h3 id="sowhatsthefuture">So what's the future?</h3>
<p>I'm not really sure where I go next with things. I can probably better implement Cosmic into my site, making more content dynamic. I also want to write some more Drafts actions to try and make things like updating a post more straightforward. But other than that, I'm feeling really excited about where things are and what I've managed to teach myself.</p>
<p>I've said it before several times, but I urge you if you're a designer who's working with developers; learn the basics of HTML, CSS and Javascript, try out a framework like Vue + Nuxt (give SwiftUI a try too). They're all becoming so much more accessible to people without programming knowledge already (or a more visually-focused brain like me) and I promise it'll be worth it.</p>
<p>If I can do it, so can you.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/bfd94640-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Getting to yes]]></title>
            <link>https://kejk.tech/thoughts/getting-to-yes</link>
            <guid>641b3f9ed0ab1034f24698c8</guid>
            <pubDate>Fri, 24 Mar 2023 09:16:03 GMT</pubDate>
            <description><![CDATA[Why I think designers and developers should learn the basics of sales. ]]></description>
            <content:encoded><![CDATA[<h3 id="whydesignersanddevelopersshouldlearnthebasicsofsales">Why designers and developers should learn the basics of sales.</h3>
<p>It's easy to think that as a designer or developer, you're responsible for the functionality, usability or appearance of the product you're working on. This applies across product design, web design, architecture and even the original meaning of product design (physical product production).</p>
<p>That is true, that is your core responsibility, but what happens when you go over-the-line with the product, when the product is finally ready for your sales team---if you have one---to go out and sell?</p>
<p>If the answer is "I don't know" then there's a serious organisational disconnect and you're doing yourselves a disservice. You worked for months slaving over the minute details, unit testing until you're blue in the face, hunting down that broken&nbsp;<em>for loop</em>&nbsp;deep inside a component file; and yet, once that's over you throw it over the fence to sales and start working on the next feature set.&nbsp;</p>
<p>But how do your team sell what you're working on? What are the things that they say to hook potential or existing customers? And why does this matter?</p>
<p>First, let's start with a story. Early on in my career, I was a sales person. I left University with a Masters in Fine Art but didn't feel I was worthy of a design or development role (despite developing skills in both places for around 10 years prior) so I went from my full-time retail job at Apple to working as an Account Executive in pharmaceutical advertising. My job was to keep projects on track, win new business and keep clients happy. I was solely responsible for selling the vision of our design and development teams and ensure coordination and clarification across the board.</p>
<p>When it came to meetings, I had to work hard to explain how something had been done, why it would take 2 months to build "that" feature and why they couldn't have the "other" feature they wanted. Throughout that process, I learnt the intricacies and nuances of behaviour, of the complexity of communicating something widely understood by designers and developers, but deeply misunderstood by customers. I expanded skills learnt from Apple Retail about how to explain the complex in a simple way, breaking technology down to its simplest form and developing similes and metaphors for different approaches. All of this led to accurate communication and valuable insight into the customer experience.</p>
<p>So, fast forward to now. Now I design and develop the frontend experience of products. From initial idea through to final execution. Throughout this process, I have regular touch points with our sales team to ensure that each feature is developed deeply inline with the requirements of our target market and explain why we've designed it one way, or developed it another. Why it can't be exactly like that thing they showed me that one time that kind of did the same thing. Why it's going to take six months to develop that special graph that takes data from 56 sources, runs a machine learning algorithm to extract the most valuable insights, feeds it back into the UI and generates a personalised graph in real-time with up-to-the-second data.</p>
<p>But I also go to those meetings, sit in on those calls, talk to those potential customers and explain these things myself. Explain our UI decisions in detail. Spend hours in workshops justifying decisions and ensuring our customers see why. And in these workshops, our sales team learn. They learn how we think about design and development decisions, why we push back when we do, and how to communicate this to customers. They learn to not promise the earth and that it'll be delivered in 2 weeks. They learn to speak in a language that is both technical and customer-centric.</p>
<p>What happens, is both sides learn how to communicate better. With each other, with the customer, with their peers. Designers and developers learn how to sell. Sales people learn how to communicate technological ideas and not over promise.</p>
<p>Everyone wins.</p>
<p>Ultimately, by tightly coupling sales with the technology teams, the result is a wonderful world where all parties are working to the same goal and with the same attitudes, understanding and beliefs.</p>
<p><strong>The</strong>&nbsp;team must be&nbsp;<strong>one</strong>&nbsp;team. It's the only way it'll ever work.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/7fe0a060-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Design as Code]]></title>
            <link>https://kejk.tech/thoughts/designing-in-code</link>
            <guid>641b3f9fd0ab1034f24698c9</guid>
            <pubDate>Fri, 24 Mar 2023 09:15:26 GMT</pubDate>
            <description><![CDATA[What learning Vue has taught me about the future of design, development and the modern web.]]></description>
            <content:encoded><![CDATA[<h3 id="whatlearningvuehastaughtmeaboutthefutureofdesignnbsp">What learning Vue has taught me about the future of design.&nbsp;</h3>
<p>So let's start with some background; I've been tinkering with website code since the early 2000s when MySpace was first on the scene and I was trying to customise the look of my personal MySpace page.</p>
<p>At that time, it involved a hell of a lot of inline styling and hacking around to find out what would work and what wouldn't. Thanks to the beauty of 'View Source', it was possible to see the detail of what another person had done, pull that code, and tweak to your heart's content until you broke it again.</p>
<p>After MySpace died and I moved on to other, less emo, things I found myself falling away from programming. That was until I started a job in healthcare leading the digital design and development of projects. This all came about organically but I was kinda out of my depth.</p>
<p>Luckily, I had a great relationship with the core developer on our team and over time started to tinker again, this time though, in production code (mostly because I did the crappy little jobs that he liked not having to do).</p>
<p>What I started to learn, was the magic of development-based design, or frontend design, where I would manipulate the UI (or DOM) inside the browser itself to see how I preferred things. It felt like the old days of tinkering on MySpace again.</p>
<p>The more I did it, the more I enjoyed the experience of designing in the browser. I'm not saying you should go away completely from using design tools (I still heavily use&nbsp;<a href="https://adobe.com/xd">Adobe XD</a>&nbsp;and&nbsp;<a href="http://figma.com/">Figma</a>), but I am saying that understanding how to design in code is a superpower that all digital designers should aim to possess.&nbsp;</p>
<p>Here are the key reasons why:</p>
<ol>
<li>You can see the direct effect of a decision, in the browser, in real-time</li>
<li>You can learn the language of development, allowing for better cross-communication between you and your development team</li>
<li>You can increase your output at your company, enabling developers to focus on the logic and complexities whilst you manipulate the styling in production code</li>
<li>You can improve your ability to work independently on client projects as a freelancer</li>
</ol>
<p>The idea of the Frontend Designer&nbsp;<a href="https://bradfrost.com/blog/post/frontend-design/">isn't new</a>&nbsp;but it certainly isn't widespread either. I strongly believe that this hybrid role is the future of design and, with the flexibility of&nbsp;<a href="https://www.webcomponents.org/">Web Components</a>&nbsp;and powerful frameworks like Vue, React and Angular enabling better component-driven design, Designers understanding code is going to be more important than ever.&nbsp;</p>
<p>If you're looking to evolve beyond HTML and CSS as a designer, but find JavaScript scary as hell (like I did) then check out&nbsp;<a href="https://vuejs.org/">Vue</a>&nbsp;and follow their extremely powerful and easy to follow documentation.</p>]]></content:encoded>
            <author>karl@kejk.tech (Karl Emil James Koch)</author>
            <enclosure url="https://imgix.cosmicjs.com/718b5870-b9ff-11ed-9435-5306e8ef93bc-image.png" length="0" type="image/png"/>
        </item>
    </channel>
</rss>